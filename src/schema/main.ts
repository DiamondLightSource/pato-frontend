/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/sessions": {
    /**
     * Get Sessions 
     * @description List visits belonging to a proposal
     */
    get: operations["get_sessions_sessions_get"];
  };
  "/tomograms/{tomogramId}/shiftPlot": {
    /**
     * Get Shift Plot 
     * @description Get X-Y shift plot data
     */
    get: operations["get_shift_plot_tomograms__tomogramId__shiftPlot_get"];
  };
  "/tomograms/{tomogramId}/motion": {
    /**
     * Get Motion Correction 
     * @description Get motion correction data for the given tomogram
     */
    get: operations["get_motion_correction_tomograms__tomogramId__motion_get"];
  };
  "/tomograms/{tomogramId}/centralSlice": {
    /**
     * Get Slice 
     * @description Get tomogram central slice image
     */
    get: operations["get_slice_tomograms__tomogramId__centralSlice_get"];
  };
  "/tomograms/{tomogramId}/ctf": {
    /**
     * Get Ctf 
     * @description Get astigmatism, resolution and defocus as a function of tilt image
     * alignment refined tilt angles
     */
    get: operations["get_ctf_tomograms__tomogramId__ctf_get"];
  };
  "/movies/{movieId}/micrograph": {
    /**
     * Get Micrograph 
     * @description Get micrograph snapshot
     */
    get: operations["get_micrograph_movies__movieId__micrograph_get"];
  };
  "/movies/{movieId}/fft": {
    /**
     * Get Fft 
     * @description Get FFT theoretical image
     */
    get: operations["get_fft_movies__movieId__fft_get"];
  };
  "/movies/{movieId}/drift": {
    /**
     * Get Drift 
     * @description Get drift
     */
    get: operations["get_drift_movies__movieId__drift_get"];
  };
  "/dataCollections": {
    /**
     * Get Collections 
     * @description List collections belonging to a data collection group
     */
    get: operations["get_collections_dataCollections_get"];
  };
  "/dataCollections/{collectionId}/tomogram": {
    /**
     * Get Tomogram 
     * @description Get tomogram that belongs to the collection
     */
    get: operations["get_tomogram_dataCollections__collectionId__tomogram_get"];
  };
  "/dataCollections/{collectionId}/processingJobs": {
    /**
     * Get Processing Jobs 
     * @description Get processing jobs that belong to the collection
     */
    get: operations["get_processing_jobs_dataCollections__collectionId__processingJobs_get"];
  };
  "/dataCollections/{collectionId}/motion": {
    /**
     * Get Motion Correction 
     * @description Get motion correction and tilt alignment data (including drift plot)
     */
    get: operations["get_motion_correction_dataCollections__collectionId__motion_get"];
  };
  "/dataGroups": {
    /**
     * Get Collection Groups 
     * @description List collection groups belonging to a session
     */
    get: operations["get_collection_groups_dataGroups_get"];
  };
  "/proposals": {
    /**
     * Get Proposals 
     * @description List proposals
     */
    get: operations["get_proposals_proposals_get"];
  };
  "/autoProc/{autoProcId}/motion": {
    /**
     * Get Motion Correction 
     * @description Get motion correction and tilt alignment data (including drift plot)
     */
    get: operations["get_motion_correction_autoProc__autoProcId__motion_get"];
  };
  "/autoProc/{autoProcId}/ctf": {
    /**
     * Get Ctf 
     * @description Get astigmatism, resolution and defocus as a function of motion correction
     * image numbers
     */
    get: operations["get_ctf_autoProc__autoProcId__ctf_get"];
  };
  "/autoProc/{autoProcId}/particlePicker": {
    /**
     * Get Particle Picker 
     * @description Get astigmatism, resolution and defocus as a function of motion correction
     * image numbers
     */
    get: operations["get_particle_picker_autoProc__autoProcId__particlePicker_get"];
  };
  "/autoProc/{autoProcId}/classification/2d": {
    /**
     * Get 2D Classification 
     * @description Get astigmatism, resolution and defocus as a function of motion correction
     * image numbers
     */
    get: operations["get_2d_classification_autoProc__autoProcId__classification_2d_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AutoProcProgram */
    AutoProcProgram: {
      /** Autoprocprogramid */
      autoProcProgramId: number;
      /** Processingcommandline */
      processingCommandLine?: string;
      /** Processingprograms */
      processingPrograms?: string;
      /** Processingstatus */
      processingStatus: number;
      /** Processingmessage */
      processingMessage?: string;
      /**
       * Processingstarttime 
       * Format: date-time
       */
      processingStartTime?: string;
      /**
       * Processingendtime 
       * Format: date-time
       */
      processingEndTime?: string;
      /** Processingenvironment */
      processingEnvironment?: string;
      /**
       * Recordtimestamp 
       * Format: date-time
       */
      recordTimeStamp?: string;
    };
    /** CTF */
    CTF: {
      /** Ctfid */
      ctfId: number;
      /** Box size in x */
      boxSizeX: number;
      /** Box size in y */
      boxSizeY: number;
      /** Minimum resolution for CTF */
      minResolution: number;
      /** Maxresolution */
      maxResolution: number;
      /** Mindefocus */
      minDefocus: number;
      /** Maxdefocus */
      maxDefocus: number;
      /** Defocusstepsize */
      defocusStepSize: number;
      /** Astigmatism */
      astigmatism: number;
      /** Astigmatismangle */
      astigmatismAngle: number;
      /** Estimatedresolution */
      estimatedResolution: number;
      /** Estimateddefocus */
      estimatedDefocus: number;
      /** Amplitudecontrast */
      amplitudeContrast: number;
      /** Correlation value */
      ccValue: number;
      /** Full path to the jpg image of the simulated FFT */
      fftTheoreticalFullPath: string;
      /** Comments */
      comments: string;
    };
    /** Classification2D */
    Classification2D: {
      /** Particleclassificationgroupid */
      particleClassificationGroupId: number;
      /** Particlepickerid */
      particlePickerId: number;
      /** Programid */
      programId: number;
      /** Type */
      type: string;
      /** Batchnumber */
      batchNumber: number;
      /** Numberofparticlesperbatch */
      numberOfParticlesPerBatch: number;
      /** Numberofclassesperbatch */
      numberOfClassesPerBatch: number;
      /** Symmetry */
      symmetry: string;
      /** Particleclassificationid */
      particleClassificationId: number;
      /** Classnumber */
      classNumber: number;
      /** Classimagefullpath */
      classImageFullPath: string;
      /** Particlesperclass */
      particlesPerClass: number;
      /** Rotationaccuracy */
      rotationAccuracy: number;
      /** Translationaccuracy */
      translationAccuracy: number;
      /** Estimatedresolution */
      estimatedResolution: number;
      /** Overallfouriercompleteness */
      overallFourierCompleteness: number;
      /** Classdistribution */
      classDistribution: number;
    };
    /** CtfImageNumber */
    CtfImageNumber: {
      /** Estimatedresolution */
      estimatedResolution?: number;
      /** Estimateddefocus */
      estimatedDefocus?: number;
      /** Astigmatism */
      astigmatism?: number;
      /** Imagenumber */
      imageNumber: number;
    };
    /** CtfImageNumberList */
    CtfImageNumberList: {
      /** Items */
      items: (components["schemas"]["CtfImageNumber"])[];
    };
    /** CtfTiltAlign */
    CtfTiltAlign: {
      /** Estimatedresolution */
      estimatedResolution?: number;
      /** Estimateddefocus */
      estimatedDefocus?: number;
      /** Astigmatism */
      astigmatism?: number;
      /** Refinedtiltangle */
      refinedTiltAngle?: number;
    };
    /** CtfTiltAlignList */
    CtfTiltAlignList: {
      /** Items */
      items: (components["schemas"]["CtfTiltAlign"])[];
    };
    /** DataCollectionGroupSummaryOut */
    DataCollectionGroupSummaryOut: {
      /**
       * Datacollectiongroupid 
       * @description Data Collection Group ID
       */
      dataCollectionGroupId: number;
      /**
       * Sessionid 
       * @description Session ID
       */
      sessionId: number;
      /** Experimenttype */
      experimentType?: string;
      /**
       * Experimenttypeid 
       * @default 37
       */
      experimentTypeId?: number;
      /**
       * Experimenttypename 
       * @default Single Particle
       */
      experimentTypeName?: string;
      /** Comments */
      comments?: string;
      /** Collections */
      collections: number;
    };
    /** DataCollectionSummaryOut */
    DataCollectionSummaryOut: {
      /**
       * Datacollectionid 
       * @description Data Collection ID
       */
      dataCollectionId: number;
      /**
       * Sessionid 
       * @description Session ID
       */
      SESSIONID: number;
      /** Comments */
      comments?: string;
      /**
       * Starttime 
       * Format: date-time
       */
      startTime?: string;
      /** Pixelsizeonimage */
      pixelSizeOnImage: number;
      /** Voltage */
      voltage: number;
      /** Imagesizex */
      imageSizeX: number;
      /** Imagesizey */
      imageSizeY: number;
      /** Tomograms */
      tomograms: number;
    };
    /** DataPoint */
    DataPoint: {
      /** X */
      x: number;
      /** Y */
      y: number;
    };
    /** FullMovie */
    FullMovie: {
      CTF: components["schemas"]["CTF"];
      Movie: components["schemas"]["Movie"];
      MotionCorrection: components["schemas"]["MotionCorrection"];
      TiltImageAlignment?: components["schemas"]["TiltImageAlignment"];
    };
    /** FullMovieWithTilt */
    FullMovieWithTilt: {
      /** Items */
      items: (components["schemas"]["FullMovie"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
      /** Rawtotal */
      rawTotal: number;
    };
    /** GenericPlot */
    GenericPlot: {
      /** Items */
      items: (components["schemas"]["DataPoint"])[];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** MotionCorrection */
    MotionCorrection: {
      /** Motioncorrectionid */
      motionCorrectionId: number;
      /** Datacollectionid */
      dataCollectionId?: number;
      /** Autoprocprogramid */
      autoProcProgramId?: number;
      /** Movie number, sequential in time 1-n */
      imageNumber: number;
      /** First frame of movie used */
      firstFrame: number;
      /** Last frame of movie used */
      lastFrame: number;
      /** Dose per frame */
      dosePerFrame: number;
      /** Dose weight */
      doseWeight: number;
      /** Total motion */
      totalMotion: number;
      /** Average motion per frame */
      averageMotionPerFrame: number;
      /** Path to drift plot */
      driftPlotFullPath: string;
      /** Path to micrograph */
      micrographFullPath: string;
      /** Path to micrograph */
      micrographSnapshotFullPath: string;
      /** Patches used in x */
      patchesUsedX: number;
      /** Patches used in y */
      patchesUsedY: number;
      /** Path to raw micrograph FFT */
      fftFullPath: string;
      /** Path to drift corrected micrograph FFT */
      fftCorrectedFullPath: string;
      /** Comments */
      comments: string;
    };
    /** Movie */
    Movie: {
      /** Movieid */
      movieId: number;
      /** Movienumber */
      movieNumber?: number;
      /** Moviefullpath */
      movieFullPath: string;
      /**
       * Createdtimestamp 
       * Format: date-time
       */
      createdTimeStamp: string;
      /** Positionx */
      positionX?: number;
      /** Positiony */
      positionY?: number;
      /** Nominal defocus */
      nominalDefocus: number;
      /** Angle */
      angle: number;
      /** accumulated electron fluence from start to end of acquisition of movie */
      fluence: number;
      /** number of frames per movie */
      numberOfFrames: number;
    };
    /** Paged[Classification2D] */
    Paged_Classification2D_: {
      /** Items */
      items: (components["schemas"]["Classification2D"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[DataCollectionGroupSummaryOut] */
    Paged_DataCollectionGroupSummaryOut_: {
      /** Items */
      items: (components["schemas"]["DataCollectionGroupSummaryOut"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[DataCollectionSummaryOut] */
    Paged_DataCollectionSummaryOut_: {
      /** Items */
      items: (components["schemas"]["DataCollectionSummaryOut"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[FullMovie] */
    Paged_FullMovie_: {
      /** Items */
      items: (components["schemas"]["FullMovie"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[ParticlePicker] */
    Paged_ParticlePicker_: {
      /** Items */
      items: (components["schemas"]["ParticlePicker"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[ProcessingJobOut] */
    Paged_ProcessingJobOut_: {
      /** Items */
      items: (components["schemas"]["ProcessingJobOut"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[ProposalOut] */
    Paged_ProposalOut_: {
      /** Items */
      items: (components["schemas"]["ProposalOut"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[VisitOut] */
    Paged_VisitOut_: {
      /** Items */
      items: (components["schemas"]["VisitOut"])[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** ParticlePicker */
    ParticlePicker: {
      /** Particlediameter */
      particleDiameter: number;
      /** Numberofparticles */
      numberOfParticles: number;
      /** Particlepickerid */
      particlePickerId: number;
      /** Summaryfullimagepath */
      summaryFullImagePath?: string;
    };
    /** ProcessingJob */
    ProcessingJob: {
      /** Processingjobid */
      processingJobId: number;
      /** Datacollectionid */
      dataCollectionId: number;
      /** Displayname */
      displayName?: string;
      /** Comments */
      comments?: string;
      /**
       * Recordtimestamp 
       * Format: date-time
       */
      recordTimestamp?: string;
      /** Recipe */
      recipe?: string;
      /** Automatic */
      automatic: number;
    };
    /** ProcessingJobOut */
    ProcessingJobOut: {
      AutoProcProgram: components["schemas"]["AutoProcProgram"];
      ProcessingJob: components["schemas"]["ProcessingJob"];
    };
    /** ProposalOut */
    ProposalOut: {
      /**
       * Proposalid 
       * @description Proposal ID
       */
      proposalId: number;
      /** Personid */
      personId: number;
      /** Title */
      title: string;
      /** Proposalcode */
      proposalCode: string;
      /** Proposalnumber */
      proposalNumber: string;
      /**
       * Bltimestamp 
       * Format: date-time
       */
      bltimeStamp: string;
      /** Proposaltype */
      proposalType: string;
      /** Sessions */
      sessions: number;
      /** @default Open */
      state?: components["schemas"]["StateEnum"];
    };
    /**
     * StateEnum 
     * @description An enumeration. 
     * @enum {string}
     */
    StateEnum: "Open" | "Closed" | "Cancelled";
    /** TiltImageAlignment */
    TiltImageAlignment: {
      /** Movieid */
      movieId: number;
      /** Defocusu */
      defocusU?: number;
      /** Defocusv */
      defocusV?: number;
      /** Psdfile */
      psdFile: string;
      /** Resolution */
      resolution?: number;
      /** Fitquality */
      fitQuality?: number;
      /** Refinedmagnification */
      refinedMagnification?: number;
      /** Refinedtiltangle */
      refinedTiltAngle?: number;
      /** Refinedtiltaxis */
      refinedTiltAxis?: number;
      /** Residualerror */
      residualError?: number;
    };
    /** Tomogram */
    Tomogram: {
      /** Tomogramid */
      tomogramId: number;
      /** Datacollectionid */
      dataCollectionId: number;
      /** Autoprocprogramid */
      autoProcProgramId?: number;
      /** Volumefile */
      volumeFile: string;
      /** Stackfile */
      stackFile: string;
      /** Sizex */
      sizeX?: number;
      /** Sizey */
      sizeY?: number;
      /** Sizez */
      sizeZ?: number;
      /** Pixelspacing */
      pixelSpacing?: number;
      /** Residualerrormean */
      residualErrorMean?: number;
      /** Residualerrorsd */
      residualErrorSD?: number;
      /** Xaxiscorrection */
      xAxisCorrection?: number;
      /** Tiltangleoffset */
      tiltAngleOffset?: number;
      /** Zshift */
      zShift?: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VisitOut */
    VisitOut: {
      /**
       * Sessionid 
       * @description Session ID
       */
      sessionId: number;
      /** Beamlinesetupid */
      beamLineSetupId?: number;
      /**
       * Proposalid 
       * @description Proposal ID
       */
      proposalId: number;
      /** Beamcalendarid */
      beamCalendarId?: number;
      /** Projectcode */
      projectCode: string;
      /**
       * Startdate 
       * Format: date-time
       */
      startDate?: string;
      /**
       * Enddate 
       * Format: date-time
       */
      endDate?: string;
      /** Beamlinename */
      beamLineName: string;
      /** Scheduled */
      scheduled: number;
      /** Nbshifts */
      nbShifts: number;
      /** Comments */
      comments: string;
      /** Beamlineoperator */
      beamLineOperator?: string;
      /** Visit Number */
      visit_number: number;
      /**
       * Usedflag 
       * @description Indicates if session has Datacollections or XFE or EnergyScans attached
       */
      usedFlag: number;
      /** Sessiontitle */
      sessionTitle: string;
      /** Structuredeterminations */
      structureDeterminations?: number;
      /** Dewartransport */
      dewarTransport?: number;
      /**
       * Databackupfrance 
       * @description Data backup and express delivery France
       */
      databackupFrance: number;
      /**
       * Databackupeurope 
       * @description Data backup and express delivery Europe
       */
      databackupEurope: number;
      /** Expsessionpk */
      expSessionPk: number;
      /**
       * Operatorsitenumber 
       * @description Matricule site
       */
      operatorSiteNumber: string;
      /**
       * Lastupdate 
       * Format: date-time 
       * @description Last update timestamp: by default the end of the session, the last collect
       */
      lastUpdate: string;
      /**
       * Protecteddata 
       * @description Indicates if the data is protected or not
       */
      protectedData: string;
      /**
       * Archived 
       * @description The data for the session is archived and no longer available on disk
       */
      archived: number;
      /** Collectiongroups */
      collectionGroups: number;
      /** Datacollectiongroupid */
      dataCollectionGroupId?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  get_sessions_sessions_get: {
    /**
     * Get Sessions 
     * @description List visits belonging to a proposal
     */
    parameters?: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        proposal?: string;
        search?: string;
        minDate?: string;
        maxDate?: string;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_VisitOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_shift_plot_tomograms__tomogramId__shiftPlot_get: {
    /**
     * Get Shift Plot 
     * @description Get X-Y shift plot data
     */
    parameters: {
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GenericPlot"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_motion_correction_tomograms__tomogramId__motion_get: {
    /**
     * Get Motion Correction 
     * @description Get motion correction data for the given tomogram
     */
    parameters: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        page?: number;
        limit?: number;
      };
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FullMovieWithTilt"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_slice_tomograms__tomogramId__centralSlice_get: {
    /**
     * Get Slice 
     * @description Get tomogram central slice image
     */
    parameters: {
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_ctf_tomograms__tomogramId__ctf_get: {
    /**
     * Get Ctf 
     * @description Get astigmatism, resolution and defocus as a function of tilt image
     * alignment refined tilt angles
     */
    parameters: {
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CtfTiltAlignList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_micrograph_movies__movieId__micrograph_get: {
    /**
     * Get Micrograph 
     * @description Get micrograph snapshot
     */
    parameters: {
      path: {
        movieId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_fft_movies__movieId__fft_get: {
    /**
     * Get Fft 
     * @description Get FFT theoretical image
     */
    parameters: {
      path: {
        movieId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_drift_movies__movieId__drift_get: {
    /**
     * Get Drift 
     * @description Get drift
     */
    parameters: {
      path: {
        movieId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GenericPlot"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_collections_dataCollections_get: {
    /**
     * Get Collections 
     * @description List collections belonging to a data collection group
     */
    parameters?: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        groupId?: number;
        search?: string;
        onlyTomograms?: boolean;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_DataCollectionSummaryOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_tomogram_dataCollections__collectionId__tomogram_get: {
    /**
     * Get Tomogram 
     * @description Get tomogram that belongs to the collection
     */
    parameters: {
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Tomogram"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_processing_jobs_dataCollections__collectionId__processingJobs_get: {
    /**
     * Get Processing Jobs 
     * @description Get processing jobs that belong to the collection
     */
    parameters: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        search?: string;
        page?: number;
        limit?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_ProcessingJobOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_motion_correction_dataCollections__collectionId__motion_get: {
    /**
     * Get Motion Correction 
     * @description Get motion correction and tilt alignment data (including drift plot)
     */
    parameters: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        page?: number;
        limit?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_FullMovie_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_collection_groups_dataGroups_get: {
    /**
     * Get Collection Groups 
     * @description List collection groups belonging to a session
     */
    parameters?: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        session?: number;
        proposal?: string;
        search?: string;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_DataCollectionGroupSummaryOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_proposals_proposals_get: {
    /**
     * Get Proposals 
     * @description List proposals
     */
    parameters?: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        search?: string;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_ProposalOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_motion_correction_autoProc__autoProcId__motion_get: {
    /**
     * Get Motion Correction 
     * @description Get motion correction and tilt alignment data (including drift plot)
     */
    parameters: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        page?: number;
        limit?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_FullMovie_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_ctf_autoProc__autoProcId__ctf_get: {
    /**
     * Get Ctf 
     * @description Get astigmatism, resolution and defocus as a function of motion correction
     * image numbers
     */
    parameters: {
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CtfImageNumberList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_particle_picker_autoProc__autoProcId__particlePicker_get: {
    /**
     * Get Particle Picker 
     * @description Get astigmatism, resolution and defocus as a function of motion correction
     * image numbers
     */
    parameters: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        page?: number;
        limit?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_ParticlePicker_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_2d_classification_autoProc__autoProcId__classification_2d_get: {
    /**
     * Get 2D Classification 
     * @description Get astigmatism, resolution and defocus as a function of motion correction
     * image numbers
     */
    parameters: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        /** @description Number of results to show */
      query?: {
        sortBy?: "class" | "particles" | "resolution";
        page?: number;
        limit?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Paged_Classification2D_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
