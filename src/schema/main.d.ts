/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/sessions": {
    /**
     * Get Sessions
     * @description List visits belonging to a proposal
     */
    get: operations["get_sessions_sessions_get"];
  };
  "/tomograms/{tomogramId}/shiftPlot": {
    /**
     * Get Shift Plot
     * @description Get X-Y shift plot data
     */
    get: operations["get_shift_plot_tomograms__tomogramId__shiftPlot_get"];
  };
  "/tomograms/{tomogramId}/motion": {
    /**
     * Get Motion Correction
     * @description Get motion correction data for the given tomogram
     */
    get: operations["get_motion_correction_tomograms__tomogramId__motion_get"];
  };
  "/tomograms/{tomogramId}/centralSlice": {
    /**
     * Get Slice
     * @description Get tomogram central slice image
     */
    get: operations["get_slice_tomograms__tomogramId__centralSlice_get"];
  };
  "/tomograms/{tomogramId}/movie": {
    /**
     * Get Movie
     * @description Get tomogram movie image
     */
    get: operations["get_movie_tomograms__tomogramId__movie_get"];
  };
  "/tomograms/{tomogramId}/projection": {
    /**
     * Get Projection
     * @description Get tomogram projection image
     */
    get: operations["get_projection_tomograms__tomogramId__projection_get"];
  };
  "/tomograms/{tomogramId}/ctf": {
    /**
     * Get Ctf
     * @description Get astigmatism, resolution and defocus as a function of tilt image
     * alignment refined tilt angles
     */
    get: operations["get_ctf_tomograms__tomogramId__ctf_get"];
  };
  "/movies/{movieId}/micrograph": {
    /**
     * Get Micrograph
     * @description Get micrograph snapshot
     */
    get: operations["get_micrograph_movies__movieId__micrograph_get"];
  };
  "/movies/{movieId}/fft": {
    /**
     * Get Fft
     * @description Get FFT theoretical image
     */
    get: operations["get_fft_movies__movieId__fft_get"];
  };
  "/movies/{movieId}/drift": {
    /**
     * Get Drift
     * @description Get drift from a JSON file or from the drift table
     */
    get: operations["get_drift_movies__movieId__drift_get"];
  };
  "/movies/{movieId}/iceThickness": {
    /**
     * Get Relative Ice Thickness
     * @description Get values for relative ice thickness for a given movie
     */
    get: operations["get_relative_ice_thickness_movies__movieId__iceThickness_get"];
  };
  "/dataCollections/{collectionId}/tomograms": {
    /**
     * Get Tomograms
     * @description Get tomogram that belongs to the collection
     */
    get: operations["get_tomograms_dataCollections__collectionId__tomograms_get"];
  };
  "/dataCollections/{collectionId}/reprocessing/tomograms": {
    /**
     * Initiate Tomogram Reprocessing
     * @description Initiate data reprocessing
     */
    post: operations["initiate_tomogram_reprocessing_dataCollections__collectionId__reprocessing_tomograms_post"];
  };
  "/dataCollections/{collectionId}/reprocessing/spa": {
    /**
     * Initiate Spa Reprocessing
     * @description Initiate data reprocessing
     */
    post: operations["initiate_spa_reprocessing_dataCollections__collectionId__reprocessing_spa_post"];
  };
  "/dataCollections/{collectionId}/processingJobs": {
    /**
     * Get Processing Jobs
     * @description Get processing jobs that belong to the collection
     */
    get: operations["get_processing_jobs_dataCollections__collectionId__processingJobs_get"];
  };
  "/dataCollections/{collectionId}/motion": {
    /**
     * Get Motion Correction
     * @description Get motion correction and tilt alignment data
     */
    get: operations["get_motion_correction_dataCollections__collectionId__motion_get"];
  };
  "/dataCollections/{collectionId}/iceThickness": {
    /**
     * Get Ice Histogram
     * @description Get relative ice thickness histogram
     */
    get: operations["get_ice_histogram_dataCollections__collectionId__iceThickness_get"];
  };
  "/dataCollections/{collectionId}/totalMotion": {
    /**
     * Get Motion Histogram
     * @description Get total motion histogram
     */
    get: operations["get_motion_histogram_dataCollections__collectionId__totalMotion_get"];
  };
  "/dataCollections/{collectionId}/resolution": {
    /**
     * Get Resolution
     * @description Get estimated resolution histogram
     */
    get: operations["get_resolution_dataCollections__collectionId__resolution_get"];
  };
  "/dataCollections/{collectionId}/particles": {
    /**
     * Get Particle Count
     * @description Get particle count histogram
     */
    get: operations["get_particle_count_dataCollections__collectionId__particles_get"];
  };
  "/dataGroups": {
    /**
     * Get Collection Groups
     * @description List collection groups belonging to a session
     */
    get: operations["get_collection_groups_dataGroups_get"];
  };
  "/dataGroups/{groupId}/dataCollections": {
    /**
     * Get Collections
     * @description List collections belonging to a data collection group
     */
    get: operations["get_collections_dataGroups__groupId__dataCollections_get"];
  };
  "/proposals": {
    /**
     * Get Proposals
     * @description List proposals
     */
    get: operations["get_proposals_proposals_get"];
  };
  "/proposals/{proposalReference}/sessions/{visitNumber}": {
    /**
     * Get Session
     * @description List proposals
     */
    get: operations["get_session_proposals__proposalReference__sessions__visitNumber__get"];
  };
  "/autoProc/{autoProcId}/tomogram": {
    /**
     * Get Tomogram
     * @description Get tomogram
     */
    get: operations["get_tomogram_autoProc__autoProcId__tomogram_get"];
  };
  "/autoProc/{autoProcId}/motion": {
    /**
     * Get Motion Correction
     * @description Get motion correction and tilt alignment data (including drift plot)
     */
    get: operations["get_motion_correction_autoProc__autoProcId__motion_get"];
  };
  "/autoProc/{autoProcId}/ctf": {
    /**
     * Get Ctf
     * @description Get astigmatism, resolution and defocus as a function of motion correction
     * image numbers
     */
    get: operations["get_ctf_autoProc__autoProcId__ctf_get"];
  };
  "/autoProc/{autoProcId}/particlePicker": {
    /**
     * Get Particle Picker
     * @description Get particle picking data
     */
    get: operations["get_particle_picker_autoProc__autoProcId__particlePicker_get"];
  };
  "/autoProc/{autoProcId}/classification": {
    /**
     * Get Classification
     * @description Get classification data
     */
    get: operations["get_classification_autoProc__autoProcId__classification_get"];
  };
  "/autoProc/{autoProcId}/classification/{classificationId}/image": {
    /**
     * Get Classification Image
     * @description Get class' image representation or MRC file
     */
    get: operations["get_classification_image_autoProc__autoProcId__classification__classificationId__image_get"];
  };
  "/autoProc/{autoProcId}/particlePicker/{particlePickerId}/image": {
    /**
     * Get Particle Picker Image
     * @description Get class image
     */
    get: operations["get_particle_picker_image_autoProc__autoProcId__particlePicker__particlePickerId__image_get"];
  };
  "/autoProc/{autoProcId}/iceThickness": {
    /**
     * Get Ice Histogram
     * @description Get relative ice thickness histogram
     */
    get: operations["get_ice_histogram_autoProc__autoProcId__iceThickness_get"];
  };
  "/autoProc/{autoProcId}/totalMotion": {
    /**
     * Get Motion
     * @description Get total motion histogram
     */
    get: operations["get_motion_autoProc__autoProcId__totalMotion_get"];
  };
  "/autoProc/{autoProcId}/resolution": {
    /**
     * Get Resolution
     * @description Get estimated resolution histogram
     */
    get: operations["get_resolution_autoProc__autoProcId__resolution_get"];
  };
  "/autoProc/{autoProcId}/particles": {
    /**
     * Get Particle Count
     * @description Get particle count histogram
     */
    get: operations["get_particle_count_autoProc__autoProcId__particles_get"];
  };
  "/feedback": {
    /**
     * Post Feedback
     * @description Post user feedback to configured email address
     */
    post: operations["post_feedback_feedback_post"];
  };
  "/processingJob/{processingJobId}/parameters": {
    /**
     * Initiate Tomogram Reprocessing
     * @description Get processing job parameters
     */
    get: operations["initiate_tomogram_reprocessing_processingJob__processingJobId__parameters_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AutoProcProgram */
    AutoProcProgram: {
      /** Autoprocprogramid */
      autoProcProgramId: number;
      /** Processingcommandline */
      processingCommandLine?: string;
      /** Processingprograms */
      processingPrograms?: string;
      /** Processingstatus */
      processingStatus?: number;
      /** Processingmessage */
      processingMessage?: string;
      /**
       * Processingstarttime
       * Format: date-time
       */
      processingStartTime?: string;
      /**
       * Processingendtime
       * Format: date-time
       */
      processingEndTime?: string;
      /** Processingenvironment */
      processingEnvironment?: string;
      /**
       * Recordtimestamp
       * Format: date-time
       */
      recordTimeStamp?: string;
    };
    /** CTF */
    CTF: {
      /** Ctfid */
      ctfId: number;
      /** Box size in x */
      boxSizeX: number;
      /** Box size in y */
      boxSizeY: number;
      /** Minimum resolution for CTF */
      minResolution: number;
      /** Maxresolution */
      maxResolution: number;
      /** Mindefocus */
      minDefocus: number;
      /** Maxdefocus */
      maxDefocus: number;
      /** Defocusstepsize */
      defocusStepSize: number;
      /** Astigmatism */
      astigmatism: number;
      /** Astigmatismangle */
      astigmatismAngle: number;
      /** Estimatedresolution */
      estimatedResolution: number;
      /** Estimateddefocus */
      estimatedDefocus: number;
      /** Amplitudecontrast */
      amplitudeContrast: number;
      /** Correlation value */
      ccValue: number;
      /** Full path to the jpg image of the simulated FFT */
      fftTheoreticalFullPath: string;
      /** Comments */
      comments: string;
    };
    /** Classification */
    Classification: {
      /** Particleclassificationgroupid */
      particleClassificationGroupId: number;
      /** Particlepickerid */
      particlePickerId: number;
      /** Programid */
      programId: number;
      /** Type */
      type: string;
      /** Batchnumber */
      batchNumber: number;
      /** Numberofparticlesperbatch */
      numberOfParticlesPerBatch: number;
      /** Numberofclassesperbatch */
      numberOfClassesPerBatch: number;
      /** Symmetry */
      symmetry: string;
      /** Particleclassificationid */
      particleClassificationId: number;
      /** Classnumber */
      classNumber: number;
      /** Classimagefullpath */
      classImageFullPath?: string;
      /** Particlesperclass */
      particlesPerClass?: number;
      /** Rotationaccuracy */
      rotationAccuracy: number;
      /** Translationaccuracy */
      translationAccuracy: number;
      /** Estimatedresolution */
      estimatedResolution: number;
      /** Overallfouriercompleteness */
      overallFourierCompleteness: number;
      /** Classdistribution */
      classDistribution?: number;
      /** Selected */
      selected?: boolean;
    };
    /** CtfImageNumber */
    CtfImageNumber: {
      /** Estimatedresolution */
      estimatedResolution?: number;
      /** Estimateddefocus */
      estimatedDefocus?: number;
      /** Astigmatism */
      astigmatism?: number;
      /** Imagenumber */
      imageNumber: number;
    };
    /** CtfImageNumberList */
    CtfImageNumberList: {
      /** Items */
      items: {
        /** Estimatedresolution */
        estimatedResolution?: number;
        /** Estimateddefocus */
        estimatedDefocus?: number;
        /** Astigmatism */
        astigmatism?: number;
        /** Imagenumber */
        imageNumber: number;
      }[];
    };
    /** CtfTiltAlign */
    CtfTiltAlign: {
      /** Estimatedresolution */
      estimatedResolution?: number;
      /** Estimateddefocus */
      estimatedDefocus?: number;
      /** Astigmatism */
      astigmatism?: number;
      /** Refinedtiltangle */
      refinedTiltAngle?: number;
    };
    /** CtfTiltAlignList */
    CtfTiltAlignList: {
      /** Items */
      items: {
        /** Estimatedresolution */
        estimatedResolution?: number;
        /** Estimateddefocus */
        estimatedDefocus?: number;
        /** Astigmatism */
        astigmatism?: number;
        /** Refinedtiltangle */
        refinedTiltAngle?: number;
      }[];
    };
    /** DataCollectionGroupSummaryResponse */
    DataCollectionGroupSummaryResponse: {
      /**
       * Datacollectiongroupid
       * @description Data Collection Group ID
       */
      dataCollectionGroupId: number;
      /**
       * Sessionid
       * @description Session ID
       */
      sessionId: number;
      /** Experimenttype */
      experimentType?: string;
      /**
       * Experimenttypeid
       * @default 37
       */
      experimentTypeId?: number;
      /**
       * Experimenttypename
       * @default Single Particle
       */
      experimentTypeName?: string;
      /** Imagedirectory */
      imageDirectory?: string;
      /** Comments */
      comments?: string;
      /** Collections */
      collections: number;
    };
    /** DataCollectionSummary */
    DataCollectionSummary: {
      /**
       * Datacollectionid
       * @description Data Collection ID
       */
      dataCollectionId: number;
      /**
       * Sessionid
       * @description Session ID
       */
      SESSIONID: number;
      /** Comments */
      comments?: string;
      /**
       * Starttime
       * Format: date-time
       * @description Start time of the dataCollection
       */
      startTime: string;
      /** Pixelsizeonimage */
      pixelSizeOnImage: number;
      /** Voltage */
      voltage: number;
      /** Imagesizex */
      imageSizeX: number;
      /** Imagesizey */
      imageSizeY: number;
      /** Experimenttype */
      experimenttype: string;
      /** Index */
      index: number;
      /**
       * Endtime
       * Format: date-time
       * @description End time of the dataCollection
       */
      endTime: string;
      /** Runstatus */
      runStatus: string;
      /** Axisstart */
      axisStart?: number;
      /** Axisend */
      axisEnd?: number;
      /** Axisrange */
      axisRange?: number;
      /** Overlap */
      overlap?: number;
      /** Numberofimages */
      numberOfImages?: number;
      /** Startimagenumber */
      startImageNumber?: number;
      /** Numberofpasses */
      numberOfPasses?: number;
      /** Exposuretime */
      exposureTime?: number;
      /**
       * Imagedirectory
       * @description The directory where files reside - should end with a slash
       */
      imageDirectory: string;
      /** Imageprefix */
      imagePrefix: string;
      /** Imagesuffix */
      imageSuffix: string;
      /**
       * Imagecontainersubpath
       * @description Internal path of a HDF5 file pointing to the data
       *         for this data collection
       */
      imageContainerSubPath: string;
      /** Filetemplate */
      fileTemplate: string;
      /** Wavelength */
      wavelength?: number;
      /** Resolution */
      resolution?: number;
      /** Detectordistance */
      detectorDistance?: number;
      /** Xbeam */
      xBeam?: number;
      /** Ybeam */
      yBeam?: number;
      /** Printableforreport */
      printableForReport?: number;
      /** Crystalclass */
      CRYSTALCLASS: string;
      /** Slitgapvertical */
      slitGapVertical?: number;
      /** Slitgaphorizontal */
      slitGapHorizontal?: number;
      /** Transmission */
      transmission?: number;
      /** Synchrotronmode */
      synchrotronMode: string;
      /** Xtalsnapshotfullpath1 */
      xtalSnapshotFullPath1: string;
      /** Xtalsnapshotfullpath2 */
      xtalSnapshotFullPath2: string;
      /** Xtalsnapshotfullpath3 */
      xtalSnapshotFullPath3: string;
      /** Xtalsnapshotfullpath4 */
      xtalSnapshotFullPath4: string;
      /**
       * RotationAxisEnum
       * @description An enumeration.
       * @enum {string}
       */
      rotationAxis?: "Omega" | "Kappa" | "Phi";
      /** Phistart */
      phiStart?: number;
      /** Kappastart */
      kappaStart?: number;
      /** Omegastart */
      omegaStart?: number;
      /** Chistart */
      chiStart?: number;
      /** Resolutionatcorner */
      resolutionAtCorner?: number;
      /** Detector2Theta */
      detector2Theta?: number;
      /** Detectormode */
      DETECTORMODE: string;
      /** Undulatorgap1 */
      undulatorGap1?: number;
      /** Undulatorgap2 */
      undulatorGap2?: number;
      /** Undulatorgap3 */
      undulatorGap3?: number;
      /** Beamsizeatsamplex */
      beamSizeAtSampleX?: number;
      /** Beamsizeatsampley */
      beamSizeAtSampleY?: number;
      /** Centeringmethod */
      centeringMethod: string;
      /** Averagetemperature */
      averageTemperature?: number;
      /** Actualcenteringposition */
      actualCenteringPosition: string;
      /** Beamshape */
      beamShape: string;
      /** Datacollectiongroupid */
      dataCollectionGroupId: number;
      /** Positionid */
      POSITIONID?: number;
      /** Detectorid */
      detectorId?: number;
      /** Screeningorigid */
      screeningOrigId?: number;
      /** Startpositionid */
      startPositionId?: number;
      /** Endpositionid */
      endPositionId?: number;
      /** Flux */
      flux?: number;
      /** Strategysubwedgeorigid */
      strategySubWedgeOrigId?: number;
      /** Blsubsampleid */
      blSubSampleId?: number;
      /** Flux End */
      flux_end?: number;
      /** Bestwilsonplotpath */
      bestWilsonPlotPath: string;
      /** Processeddatafile */
      processedDataFile: string;
      /** Datfullpath */
      datFullPath: string;
      /** Magnification */
      magnification?: number;
      /** Totalabsorbeddose */
      totalAbsorbedDose?: number;
      /** Binning */
      binning?: number;
      /** Particlediameter */
      particleDiameter?: number;
      /** Boxsize Ctf */
      boxSize_CTF?: number;
      /** Minresolution */
      minResolution?: number;
      /** Mindefocus */
      minDefocus?: number;
      /** Maxdefocus */
      maxDefocus?: number;
      /** Defocusstepsize */
      defocusStepSize?: number;
      /** Amountastigmatism */
      amountAstigmatism?: number;
      /** Extractsize */
      extractSize?: number;
      /** Bgradius */
      bgRadius?: number;
      /** Objaperture */
      objAperture?: number;
      /** C1Aperture */
      c1aperture?: number;
      /** C2Aperture */
      c2aperture?: number;
      /** C3Aperture */
      c3aperture?: number;
      /** C1Lens */
      c1lens?: number;
      /** C2Lens */
      c2lens?: number;
      /** C3Lens */
      c3lens?: number;
      /** Totalexposeddose */
      totalExposedDose?: number;
      /** Nominalmagnification */
      nominalMagnification?: number;
      /** Nominaldefocus */
      nominalDefocus?: number;
      /** Phaseplate */
      phasePlate?: string;
      /** Datacollectionplanid */
      dataCollectionPlanId?: number;
      /** Tomograms */
      tomograms: number;
    };
    /** DataPoint */
    DataPoint: {
      /** X */
      x: number | string;
      /** Y */
      y: number;
    };
    /** FeedbackForm */
    FeedbackForm: {
      /** Fullname */
      fullName: string;
      /** Email */
      email: string;
      /** Comments */
      comments: string;
      /** Useragent */
      userAgent: string;
    };
    /** FullMovie */
    FullMovie: {
      /** CTF */
      CTF: {
        /** Ctfid */
        ctfId: number;
        /** Box size in x */
        boxSizeX: number;
        /** Box size in y */
        boxSizeY: number;
        /** Minimum resolution for CTF */
        minResolution: number;
        /** Maxresolution */
        maxResolution: number;
        /** Mindefocus */
        minDefocus: number;
        /** Maxdefocus */
        maxDefocus: number;
        /** Defocusstepsize */
        defocusStepSize: number;
        /** Astigmatism */
        astigmatism: number;
        /** Astigmatismangle */
        astigmatismAngle: number;
        /** Estimatedresolution */
        estimatedResolution: number;
        /** Estimateddefocus */
        estimatedDefocus: number;
        /** Amplitudecontrast */
        amplitudeContrast: number;
        /** Correlation value */
        ccValue: number;
        /** Full path to the jpg image of the simulated FFT */
        fftTheoreticalFullPath: string;
        /** Comments */
        comments: string;
      };
      /** Movie */
      Movie: {
        /** Movieid */
        movieId: number;
        /** Movienumber */
        movieNumber?: number;
        /** Moviefullpath */
        movieFullPath: string;
        /**
         * Createdtimestamp
         * Format: date-time
         */
        createdTimeStamp: string;
        /** Positionx */
        positionX?: number;
        /** Positiony */
        positionY?: number;
        /** Nominal defocus */
        nominalDefocus: number;
        /** Angle */
        angle: number;
        /** accumulated electron fluence from start to end of acquisition of movie */
        fluence: number;
        /** number of frames per movie */
        numberOfFrames: number;
      };
      /** MotionCorrection */
      MotionCorrection: {
        /** Motioncorrectionid */
        motionCorrectionId: number;
        /** Datacollectionid */
        dataCollectionId?: number;
        /** Autoprocprogramid */
        autoProcProgramId?: number;
        /** Movie number, sequential in time 1-n */
        imageNumber: number;
        /** First frame of movie used */
        firstFrame: number;
        /** Last frame of movie used */
        lastFrame: number;
        /** Dose per frame */
        dosePerFrame: number;
        /** Dose weight */
        doseWeight: number;
        /** Total motion */
        totalMotion: number;
        /** Average motion per frame */
        averageMotionPerFrame: number;
        /** Path to drift plot */
        driftPlotFullPath: string;
        /** Path to micrograph */
        micrographFullPath: string;
        /** Path to micrograph */
        micrographSnapshotFullPath: string;
        /** Patches used in x */
        patchesUsedX: number;
        /** Patches used in y */
        patchesUsedY: number;
        /** Path to raw micrograph FFT */
        fftFullPath: string;
        /** Path to drift corrected micrograph FFT */
        fftCorrectedFullPath: string;
        /** Comments */
        comments: string;
      };
      /** TiltImageAlignment */
      TiltImageAlignment?: {
        /** Movieid */
        movieId: number;
        /** Defocusu */
        defocusU?: number;
        /** Defocusv */
        defocusV?: number;
        /** Psdfile */
        psdFile: string;
        /** Resolution */
        resolution?: number;
        /** Fitquality */
        fitQuality?: number;
        /** Refinedmagnification */
        refinedMagnification?: number;
        /** Refinedtiltangle */
        refinedTiltAngle?: number;
        /** Refinedtiltaxis */
        refinedTiltAxis?: number;
        /** Residualerror */
        residualError?: number;
      };
    };
    /** FullMovieWithTilt */
    FullMovieWithTilt: {
      /** Items */
      items: {
        /** CTF */
        CTF: {
          /** Ctfid */
          ctfId: number;
          /** Box size in x */
          boxSizeX: number;
          /** Box size in y */
          boxSizeY: number;
          /** Minimum resolution for CTF */
          minResolution: number;
          /** Maxresolution */
          maxResolution: number;
          /** Mindefocus */
          minDefocus: number;
          /** Maxdefocus */
          maxDefocus: number;
          /** Defocusstepsize */
          defocusStepSize: number;
          /** Astigmatism */
          astigmatism: number;
          /** Astigmatismangle */
          astigmatismAngle: number;
          /** Estimatedresolution */
          estimatedResolution: number;
          /** Estimateddefocus */
          estimatedDefocus: number;
          /** Amplitudecontrast */
          amplitudeContrast: number;
          /** Correlation value */
          ccValue: number;
          /** Full path to the jpg image of the simulated FFT */
          fftTheoreticalFullPath: string;
          /** Comments */
          comments: string;
        };
        /** Movie */
        Movie: {
          /** Movieid */
          movieId: number;
          /** Movienumber */
          movieNumber?: number;
          /** Moviefullpath */
          movieFullPath: string;
          /**
           * Createdtimestamp
           * Format: date-time
           */
          createdTimeStamp: string;
          /** Positionx */
          positionX?: number;
          /** Positiony */
          positionY?: number;
          /** Nominal defocus */
          nominalDefocus: number;
          /** Angle */
          angle: number;
          /** accumulated electron fluence from start to end of acquisition of movie */
          fluence: number;
          /** number of frames per movie */
          numberOfFrames: number;
        };
        /** MotionCorrection */
        MotionCorrection: {
          /** Motioncorrectionid */
          motionCorrectionId: number;
          /** Datacollectionid */
          dataCollectionId?: number;
          /** Autoprocprogramid */
          autoProcProgramId?: number;
          /** Movie number, sequential in time 1-n */
          imageNumber: number;
          /** First frame of movie used */
          firstFrame: number;
          /** Last frame of movie used */
          lastFrame: number;
          /** Dose per frame */
          dosePerFrame: number;
          /** Dose weight */
          doseWeight: number;
          /** Total motion */
          totalMotion: number;
          /** Average motion per frame */
          averageMotionPerFrame: number;
          /** Path to drift plot */
          driftPlotFullPath: string;
          /** Path to micrograph */
          micrographFullPath: string;
          /** Path to micrograph */
          micrographSnapshotFullPath: string;
          /** Patches used in x */
          patchesUsedX: number;
          /** Patches used in y */
          patchesUsedY: number;
          /** Path to raw micrograph FFT */
          fftFullPath: string;
          /** Path to drift corrected micrograph FFT */
          fftCorrectedFullPath: string;
          /** Comments */
          comments: string;
        };
        /** TiltImageAlignment */
        TiltImageAlignment?: {
          /** Movieid */
          movieId: number;
          /** Defocusu */
          defocusU?: number;
          /** Defocusv */
          defocusV?: number;
          /** Psdfile */
          psdFile: string;
          /** Resolution */
          resolution?: number;
          /** Fitquality */
          fitQuality?: number;
          /** Refinedmagnification */
          refinedMagnification?: number;
          /** Refinedtiltangle */
          refinedTiltAngle?: number;
          /** Refinedtiltaxis */
          refinedTiltAxis?: number;
          /** Residualerror */
          residualError?: number;
        };
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
      /** Rawtotal */
      rawTotal: number;
    };
    /** GenericPlot */
    GenericPlot: {
      /** Items */
      items: {
        /** X */
        x: number | string;
        /** Y */
        y: number;
      }[];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: {
        /** Location */
        loc: (string | number)[];
        /** Message */
        msg: string;
        /** Error Type */
        type: string;
      }[];
    };
    /** IceThicknessWithAverage */
    IceThicknessWithAverage: {
      /** Current */
      current: {
        /** Minimum */
        minimum: number;
        /** Q1 */
        q1: number;
        /** Median */
        median: number;
        /** Q3 */
        q3: number;
        /** Maximum */
        maximum: number;
      };
      /** Avg */
      avg: {
        /** Minimum */
        minimum: number;
        /** Q1 */
        q1: number;
        /** Median */
        median: number;
        /** Q3 */
        q3: number;
        /** Maximum */
        maximum: number;
      };
    };
    /** MotionCorrection */
    MotionCorrection: {
      /** Motioncorrectionid */
      motionCorrectionId: number;
      /** Datacollectionid */
      dataCollectionId?: number;
      /** Autoprocprogramid */
      autoProcProgramId?: number;
      /** Movie number, sequential in time 1-n */
      imageNumber: number;
      /** First frame of movie used */
      firstFrame: number;
      /** Last frame of movie used */
      lastFrame: number;
      /** Dose per frame */
      dosePerFrame: number;
      /** Dose weight */
      doseWeight: number;
      /** Total motion */
      totalMotion: number;
      /** Average motion per frame */
      averageMotionPerFrame: number;
      /** Path to drift plot */
      driftPlotFullPath: string;
      /** Path to micrograph */
      micrographFullPath: string;
      /** Path to micrograph */
      micrographSnapshotFullPath: string;
      /** Patches used in x */
      patchesUsedX: number;
      /** Patches used in y */
      patchesUsedY: number;
      /** Path to raw micrograph FFT */
      fftFullPath: string;
      /** Path to drift corrected micrograph FFT */
      fftCorrectedFullPath: string;
      /** Comments */
      comments: string;
    };
    /** Movie */
    Movie: {
      /** Movieid */
      movieId: number;
      /** Movienumber */
      movieNumber?: number;
      /** Moviefullpath */
      movieFullPath: string;
      /**
       * Createdtimestamp
       * Format: date-time
       */
      createdTimeStamp: string;
      /** Positionx */
      positionX?: number;
      /** Positiony */
      positionY?: number;
      /** Nominal defocus */
      nominalDefocus: number;
      /** Angle */
      angle: number;
      /** accumulated electron fluence from start to end of acquisition of movie */
      fluence: number;
      /** number of frames per movie */
      numberOfFrames: number;
    };
    /** Paged[Classification] */
    Paged_Classification_: {
      /** Items */
      items: {
        /** Particleclassificationgroupid */
        particleClassificationGroupId: number;
        /** Particlepickerid */
        particlePickerId: number;
        /** Programid */
        programId: number;
        /** Type */
        type: string;
        /** Batchnumber */
        batchNumber: number;
        /** Numberofparticlesperbatch */
        numberOfParticlesPerBatch: number;
        /** Numberofclassesperbatch */
        numberOfClassesPerBatch: number;
        /** Symmetry */
        symmetry: string;
        /** Particleclassificationid */
        particleClassificationId: number;
        /** Classnumber */
        classNumber: number;
        /** Classimagefullpath */
        classImageFullPath?: string;
        /** Particlesperclass */
        particlesPerClass?: number;
        /** Rotationaccuracy */
        rotationAccuracy: number;
        /** Translationaccuracy */
        translationAccuracy: number;
        /** Estimatedresolution */
        estimatedResolution: number;
        /** Overallfouriercompleteness */
        overallFourierCompleteness: number;
        /** Classdistribution */
        classDistribution?: number;
        /** Selected */
        selected?: boolean;
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[DataCollectionGroupSummaryResponse] */
    Paged_DataCollectionGroupSummaryResponse_: {
      /** Items */
      items: {
        /**
         * Datacollectiongroupid
         * @description Data Collection Group ID
         */
        dataCollectionGroupId: number;
        /**
         * Sessionid
         * @description Session ID
         */
        sessionId: number;
        /** Experimenttype */
        experimentType?: string;
        /**
         * Experimenttypeid
         * @default 37
         */
        experimentTypeId?: number;
        /**
         * Experimenttypename
         * @default Single Particle
         */
        experimentTypeName?: string;
        /** Imagedirectory */
        imageDirectory?: string;
        /** Comments */
        comments?: string;
        /** Collections */
        collections: number;
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[DataCollectionSummary] */
    Paged_DataCollectionSummary_: {
      /** Items */
      items: {
        /**
         * Datacollectionid
         * @description Data Collection ID
         */
        dataCollectionId: number;
        /**
         * Sessionid
         * @description Session ID
         */
        SESSIONID: number;
        /** Comments */
        comments?: string;
        /**
         * Starttime
         * Format: date-time
         * @description Start time of the dataCollection
         */
        startTime: string;
        /** Pixelsizeonimage */
        pixelSizeOnImage: number;
        /** Voltage */
        voltage: number;
        /** Imagesizex */
        imageSizeX: number;
        /** Imagesizey */
        imageSizeY: number;
        /** Experimenttype */
        experimenttype: string;
        /** Index */
        index: number;
        /**
         * Endtime
         * Format: date-time
         * @description End time of the dataCollection
         */
        endTime: string;
        /** Runstatus */
        runStatus: string;
        /** Axisstart */
        axisStart?: number;
        /** Axisend */
        axisEnd?: number;
        /** Axisrange */
        axisRange?: number;
        /** Overlap */
        overlap?: number;
        /** Numberofimages */
        numberOfImages?: number;
        /** Startimagenumber */
        startImageNumber?: number;
        /** Numberofpasses */
        numberOfPasses?: number;
        /** Exposuretime */
        exposureTime?: number;
        /**
         * Imagedirectory
         * @description The directory where files reside - should end with a slash
         */
        imageDirectory: string;
        /** Imageprefix */
        imagePrefix: string;
        /** Imagesuffix */
        imageSuffix: string;
        /**
         * Imagecontainersubpath
         * @description Internal path of a HDF5 file pointing to the data
         *         for this data collection
         */
        imageContainerSubPath: string;
        /** Filetemplate */
        fileTemplate: string;
        /** Wavelength */
        wavelength?: number;
        /** Resolution */
        resolution?: number;
        /** Detectordistance */
        detectorDistance?: number;
        /** Xbeam */
        xBeam?: number;
        /** Ybeam */
        yBeam?: number;
        /** Printableforreport */
        printableForReport?: number;
        /** Crystalclass */
        CRYSTALCLASS: string;
        /** Slitgapvertical */
        slitGapVertical?: number;
        /** Slitgaphorizontal */
        slitGapHorizontal?: number;
        /** Transmission */
        transmission?: number;
        /** Synchrotronmode */
        synchrotronMode: string;
        /** Xtalsnapshotfullpath1 */
        xtalSnapshotFullPath1: string;
        /** Xtalsnapshotfullpath2 */
        xtalSnapshotFullPath2: string;
        /** Xtalsnapshotfullpath3 */
        xtalSnapshotFullPath3: string;
        /** Xtalsnapshotfullpath4 */
        xtalSnapshotFullPath4: string;
        /**
         * RotationAxisEnum
         * @description An enumeration.
         * @enum {string}
         */
        rotationAxis?: "Omega" | "Kappa" | "Phi";
        /** Phistart */
        phiStart?: number;
        /** Kappastart */
        kappaStart?: number;
        /** Omegastart */
        omegaStart?: number;
        /** Chistart */
        chiStart?: number;
        /** Resolutionatcorner */
        resolutionAtCorner?: number;
        /** Detector2Theta */
        detector2Theta?: number;
        /** Detectormode */
        DETECTORMODE: string;
        /** Undulatorgap1 */
        undulatorGap1?: number;
        /** Undulatorgap2 */
        undulatorGap2?: number;
        /** Undulatorgap3 */
        undulatorGap3?: number;
        /** Beamsizeatsamplex */
        beamSizeAtSampleX?: number;
        /** Beamsizeatsampley */
        beamSizeAtSampleY?: number;
        /** Centeringmethod */
        centeringMethod: string;
        /** Averagetemperature */
        averageTemperature?: number;
        /** Actualcenteringposition */
        actualCenteringPosition: string;
        /** Beamshape */
        beamShape: string;
        /** Datacollectiongroupid */
        dataCollectionGroupId: number;
        /** Positionid */
        POSITIONID?: number;
        /** Detectorid */
        detectorId?: number;
        /** Screeningorigid */
        screeningOrigId?: number;
        /** Startpositionid */
        startPositionId?: number;
        /** Endpositionid */
        endPositionId?: number;
        /** Flux */
        flux?: number;
        /** Strategysubwedgeorigid */
        strategySubWedgeOrigId?: number;
        /** Blsubsampleid */
        blSubSampleId?: number;
        /** Flux End */
        flux_end?: number;
        /** Bestwilsonplotpath */
        bestWilsonPlotPath: string;
        /** Processeddatafile */
        processedDataFile: string;
        /** Datfullpath */
        datFullPath: string;
        /** Magnification */
        magnification?: number;
        /** Totalabsorbeddose */
        totalAbsorbedDose?: number;
        /** Binning */
        binning?: number;
        /** Particlediameter */
        particleDiameter?: number;
        /** Boxsize Ctf */
        boxSize_CTF?: number;
        /** Minresolution */
        minResolution?: number;
        /** Mindefocus */
        minDefocus?: number;
        /** Maxdefocus */
        maxDefocus?: number;
        /** Defocusstepsize */
        defocusStepSize?: number;
        /** Amountastigmatism */
        amountAstigmatism?: number;
        /** Extractsize */
        extractSize?: number;
        /** Bgradius */
        bgRadius?: number;
        /** Objaperture */
        objAperture?: number;
        /** C1Aperture */
        c1aperture?: number;
        /** C2Aperture */
        c2aperture?: number;
        /** C3Aperture */
        c3aperture?: number;
        /** C1Lens */
        c1lens?: number;
        /** C2Lens */
        c2lens?: number;
        /** C3Lens */
        c3lens?: number;
        /** Totalexposeddose */
        totalExposedDose?: number;
        /** Nominalmagnification */
        nominalMagnification?: number;
        /** Nominaldefocus */
        nominalDefocus?: number;
        /** Phaseplate */
        phasePlate?: string;
        /** Datacollectionplanid */
        dataCollectionPlanId?: number;
        /** Tomograms */
        tomograms: number;
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[FullMovie] */
    Paged_FullMovie_: {
      /** Items */
      items: {
        /** CTF */
        CTF: {
          /** Ctfid */
          ctfId: number;
          /** Box size in x */
          boxSizeX: number;
          /** Box size in y */
          boxSizeY: number;
          /** Minimum resolution for CTF */
          minResolution: number;
          /** Maxresolution */
          maxResolution: number;
          /** Mindefocus */
          minDefocus: number;
          /** Maxdefocus */
          maxDefocus: number;
          /** Defocusstepsize */
          defocusStepSize: number;
          /** Astigmatism */
          astigmatism: number;
          /** Astigmatismangle */
          astigmatismAngle: number;
          /** Estimatedresolution */
          estimatedResolution: number;
          /** Estimateddefocus */
          estimatedDefocus: number;
          /** Amplitudecontrast */
          amplitudeContrast: number;
          /** Correlation value */
          ccValue: number;
          /** Full path to the jpg image of the simulated FFT */
          fftTheoreticalFullPath: string;
          /** Comments */
          comments: string;
        };
        /** Movie */
        Movie: {
          /** Movieid */
          movieId: number;
          /** Movienumber */
          movieNumber?: number;
          /** Moviefullpath */
          movieFullPath: string;
          /**
           * Createdtimestamp
           * Format: date-time
           */
          createdTimeStamp: string;
          /** Positionx */
          positionX?: number;
          /** Positiony */
          positionY?: number;
          /** Nominal defocus */
          nominalDefocus: number;
          /** Angle */
          angle: number;
          /** accumulated electron fluence from start to end of acquisition of movie */
          fluence: number;
          /** number of frames per movie */
          numberOfFrames: number;
        };
        /** MotionCorrection */
        MotionCorrection: {
          /** Motioncorrectionid */
          motionCorrectionId: number;
          /** Datacollectionid */
          dataCollectionId?: number;
          /** Autoprocprogramid */
          autoProcProgramId?: number;
          /** Movie number, sequential in time 1-n */
          imageNumber: number;
          /** First frame of movie used */
          firstFrame: number;
          /** Last frame of movie used */
          lastFrame: number;
          /** Dose per frame */
          dosePerFrame: number;
          /** Dose weight */
          doseWeight: number;
          /** Total motion */
          totalMotion: number;
          /** Average motion per frame */
          averageMotionPerFrame: number;
          /** Path to drift plot */
          driftPlotFullPath: string;
          /** Path to micrograph */
          micrographFullPath: string;
          /** Path to micrograph */
          micrographSnapshotFullPath: string;
          /** Patches used in x */
          patchesUsedX: number;
          /** Patches used in y */
          patchesUsedY: number;
          /** Path to raw micrograph FFT */
          fftFullPath: string;
          /** Path to drift corrected micrograph FFT */
          fftCorrectedFullPath: string;
          /** Comments */
          comments: string;
        };
        /** TiltImageAlignment */
        TiltImageAlignment?: {
          /** Movieid */
          movieId: number;
          /** Defocusu */
          defocusU?: number;
          /** Defocusv */
          defocusV?: number;
          /** Psdfile */
          psdFile: string;
          /** Resolution */
          resolution?: number;
          /** Fitquality */
          fitQuality?: number;
          /** Refinedmagnification */
          refinedMagnification?: number;
          /** Refinedtiltangle */
          refinedTiltAngle?: number;
          /** Refinedtiltaxis */
          refinedTiltAxis?: number;
          /** Residualerror */
          residualError?: number;
        };
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[ParticlePicker] */
    Paged_ParticlePicker_: {
      /** Items */
      items: {
        /** Particlediameter */
        particleDiameter?: number;
        /** Numberofparticles */
        numberOfParticles?: number;
        /** Particlepickerid */
        particlePickerId?: number;
        /** Summaryfullimagepath */
        summaryFullImagePath?: string;
        /** Imagenumber */
        imageNumber: number;
        /** Movieid */
        movieId: number;
        /**
         * Createdtimestamp
         * Format: date-time
         */
        createdTimeStamp?: string;
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[ProcessingJobResponse] */
    Paged_ProcessingJobResponse_: {
      /** Items */
      items: {
        /** AutoProcProgram */
        AutoProcProgram: {
          /** Autoprocprogramid */
          autoProcProgramId: number;
          /** Processingcommandline */
          processingCommandLine?: string;
          /** Processingprograms */
          processingPrograms?: string;
          /** Processingstatus */
          processingStatus?: number;
          /** Processingmessage */
          processingMessage?: string;
          /**
           * Processingstarttime
           * Format: date-time
           */
          processingStartTime?: string;
          /**
           * Processingendtime
           * Format: date-time
           */
          processingEndTime?: string;
          /** Processingenvironment */
          processingEnvironment?: string;
          /**
           * Recordtimestamp
           * Format: date-time
           */
          recordTimeStamp?: string;
        };
        /** ProcessingJob */
        ProcessingJob: {
          /** Processingjobid */
          processingJobId: number;
          /** Datacollectionid */
          dataCollectionId: number;
          /** Displayname */
          displayName: string;
          /** Comments */
          comments: string;
          /**
           * Recordtimestamp
           * Format: date-time
           */
          recordTimestamp?: string;
          /** Recipe */
          recipe: string;
          /** Automatic */
          automatic?: number;
        };
        /** Status */
        status: string;
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[ProposalResponse] */
    Paged_ProposalResponse_: {
      /** Items */
      items: {
        /**
         * Proposalid
         * @description Proposal ID
         */
        proposalId: number;
        /** Personid */
        personId: number;
        /** Title */
        title: string;
        /** Proposalcode */
        proposalCode: string;
        /** Proposalnumber */
        proposalNumber: string;
        /**
         * Bltimestamp
         * Format: date-time
         */
        bltimeStamp: string;
        /** Proposaltype */
        proposalType: string;
        /**
         * StateEnum
         * @description An enumeration.
         * @enum {string}
         */
        state: "Open" | "Closed" | "Cancelled";
        /** Sessions */
        sessions: number;
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[SessionResponse] */
    Paged_SessionResponse_: {
      /** Items */
      items: {
        /**
         * Sessionid
         * @description Session ID
         */
        sessionId: number;
        /** Beamlinesetupid */
        beamLineSetupId?: number;
        /**
         * Proposalid
         * @description Proposal ID
         */
        proposalId: number;
        /** Beamcalendarid */
        beamCalendarId?: number;
        /** Projectcode */
        projectCode: string;
        /**
         * Startdate
         * Format: date-time
         */
        startDate?: string;
        /**
         * Enddate
         * Format: date-time
         */
        endDate?: string;
        /** Beamlinename */
        beamLineName: string;
        /** Scheduled */
        scheduled: number;
        /** Nbshifts */
        nbShifts: number;
        /** Comments */
        comments: string;
        /** Beamlineoperator */
        beamLineOperator?: string;
        /**
         * Bltimestamp
         * Format: date-time
         */
        bltimeStamp: string;
        /** Parentproposal */
        parentProposal: string;
        /** Visit Number */
        visit_number: number;
        /**
         * Usedflag
         * @description Indicates if session has Datacollections or XFE or EnergyScans attached
         */
        usedFlag: number;
        /** Sessiontitle */
        sessionTitle: string;
        /** Structuredeterminations */
        structureDeterminations?: number;
        /** Dewartransport */
        dewarTransport?: number;
        /**
         * Databackupfrance
         * @description Data backup and express delivery France
         */
        databackupFrance: number;
        /**
         * Databackupeurope
         * @description Data backup and express delivery Europe
         */
        databackupEurope: number;
        /** Expsessionpk */
        expSessionPk: number;
        /**
         * Operatorsitenumber
         * @description Matricule site
         */
        operatorSiteNumber: string;
        /**
         * Lastupdate
         * Format: date-time
         * @description Last update timestamp: by default the end of the session, the last collect
         */
        lastUpdate: string;
        /**
         * Protecteddata
         * @description Indicates if the data is protected or not
         */
        protectedData: string;
        /**
         * Archived
         * @description The data for the session is archived and no longer available on disk
         */
        archived: number;
        /** Collectiongroups */
        collectionGroups?: number;
        /** Datacollectiongroupid */
        dataCollectionGroupId?: number;
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[TomogramFullResponse] */
    Paged_TomogramFullResponse_: {
      /** Items */
      items: {
        /** AutoProcProgram */
        AutoProcProgram: {
          /** Autoprocprogramid */
          autoProcProgramId: number;
          /** Processingcommandline */
          processingCommandLine?: string;
          /** Processingprograms */
          processingPrograms?: string;
          /** Processingstatus */
          processingStatus?: number;
          /** Processingmessage */
          processingMessage?: string;
          /**
           * Processingstarttime
           * Format: date-time
           */
          processingStartTime?: string;
          /**
           * Processingendtime
           * Format: date-time
           */
          processingEndTime?: string;
          /** Processingenvironment */
          processingEnvironment?: string;
          /**
           * Recordtimestamp
           * Format: date-time
           */
          recordTimeStamp?: string;
        };
        /** ProcessingJob */
        ProcessingJob: {
          /** Processingjobid */
          processingJobId: number;
          /** Datacollectionid */
          dataCollectionId: number;
          /** Displayname */
          displayName: string;
          /** Comments */
          comments: string;
          /**
           * Recordtimestamp
           * Format: date-time
           */
          recordTimestamp?: string;
          /** Recipe */
          recipe: string;
          /** Automatic */
          automatic?: number;
        };
        /** Status */
        status: string;
        /** TomogramResponse */
        Tomogram?: {
          /** Tomogramid */
          tomogramId: number;
          /** Volumefile */
          volumeFile: string;
          /** Stackfile */
          stackFile: string;
          /** Sizex */
          sizeX?: number;
          /** Sizey */
          sizeY?: number;
          /** Sizez */
          sizeZ?: number;
          /** Pixelspacing */
          pixelSpacing?: number;
          /** Residualerrormean */
          residualErrorMean?: number;
          /** Residualerrorsd */
          residualErrorSD?: number;
          /** Xaxiscorrection */
          xAxisCorrection?: number;
          /** Tiltangleoffset */
          tiltAngleOffset?: number;
          /** Zshift */
          zShift?: number;
          /** Refinedtiltaxis */
          refinedTiltAxis?: number;
        };
      }[];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** ParticlePicker */
    ParticlePicker: {
      /** Particlediameter */
      particleDiameter?: number;
      /** Numberofparticles */
      numberOfParticles?: number;
      /** Particlepickerid */
      particlePickerId?: number;
      /** Summaryfullimagepath */
      summaryFullImagePath?: string;
      /** Imagenumber */
      imageNumber: number;
      /** Movieid */
      movieId: number;
      /**
       * Createdtimestamp
       * Format: date-time
       */
      createdTimeStamp?: string;
    };
    /** ProcessingJob */
    ProcessingJob: {
      /** Processingjobid */
      processingJobId: number;
      /** Datacollectionid */
      dataCollectionId: number;
      /** Displayname */
      displayName: string;
      /** Comments */
      comments: string;
      /**
       * Recordtimestamp
       * Format: date-time
       */
      recordTimestamp?: string;
      /** Recipe */
      recipe: string;
      /** Automatic */
      automatic?: number;
    };
    /** ProcessingJobParameters */
    ProcessingJobParameters: {
      /** Items */
      items: {
        [key: string]: string | undefined;
      };
      /** Allowreprocessing */
      allowReprocessing: boolean;
    };
    /** ProcessingJobResponse */
    ProcessingJobResponse: {
      /** AutoProcProgram */
      AutoProcProgram: {
        /** Autoprocprogramid */
        autoProcProgramId: number;
        /** Processingcommandline */
        processingCommandLine?: string;
        /** Processingprograms */
        processingPrograms?: string;
        /** Processingstatus */
        processingStatus?: number;
        /** Processingmessage */
        processingMessage?: string;
        /**
         * Processingstarttime
         * Format: date-time
         */
        processingStartTime?: string;
        /**
         * Processingendtime
         * Format: date-time
         */
        processingEndTime?: string;
        /** Processingenvironment */
        processingEnvironment?: string;
        /**
         * Recordtimestamp
         * Format: date-time
         */
        recordTimeStamp?: string;
      } | null;
      /** ProcessingJob */
      ProcessingJob: {
        /** Processingjobid */
        processingJobId: number;
        /** Datacollectionid */
        dataCollectionId: number;
        /** Displayname */
        displayName: string;
        /** Comments */
        comments: string;
        /**
         * Recordtimestamp
         * Format: date-time
         */
        recordTimestamp?: string;
        /** Recipe */
        recipe: string;
        /** Automatic */
        automatic?: number;
      };
      /** Status */
      status: string;
    };
    /** ProposalResponse */
    ProposalResponse: {
      /**
       * Proposalid
       * @description Proposal ID
       */
      proposalId: number;
      /** Personid */
      personId: number;
      /** Title */
      title: string;
      /** Proposalcode */
      proposalCode: string;
      /** Proposalnumber */
      proposalNumber: string;
      /**
       * Bltimestamp
       * Format: date-time
       */
      bltimeStamp: string;
      /** Proposaltype */
      proposalType: string;
      /**
       * StateEnum
       * @description An enumeration.
       * @enum {string}
       */
      state: "Open" | "Closed" | "Cancelled";
      /** Sessions */
      sessions: number;
    };
    /** RelativeIceThickness */
    RelativeIceThickness: {
      /** Minimum */
      minimum: number;
      /** Q1 */
      q1: number;
      /** Median */
      median: number;
      /** Q3 */
      q3: number;
      /** Maximum */
      maximum: number;
    };
    /** ReprocessingResponse */
    ReprocessingResponse: {
      /** Processingjobid */
      processingJobId: number;
    };
    /**
     * RotationAxisEnum
     * @description An enumeration.
     * @enum {string}
     */
    RotationAxisEnum: "Omega" | "Kappa" | "Phi";
    /** SPAReprocessingParameters */
    SPAReprocessingParameters: {
      /**
       * Voltage
       * @default 300
       * @enum {integer}
       */
      voltage?: 200 | 300;
      /**
       * Sphericalaberration
       * @default 2.7
       */
      sphericalAberration?: number;
      /**
       * Phaseplateused
       * @default false
       */
      phasePlateUsed?: boolean;
      /** Pixelsize */
      pixelSize: number;
      /**
       * Motioncorrectionbinning
       * @default 1
       * @enum {integer}
       */
      motionCorrectionBinning?: 1 | 2;
      /** Doseperframe */
      dosePerFrame: number;
      /**
       * Stopafterctfestimation
       * @default false
       */
      stopAfterCtfEstimation?: boolean;
      /**
       * Usecryolo
       * @description Use crYOLO with autopick. Academic users only.
       * @default false
       */
      useCryolo?: boolean;
      /**
       * Doclass3D
       * @default true
       */
      doClass3D?: boolean;
      /**
       * Doclass2D
       * @default true
       */
      doClass2D?: boolean;
      /** Maskdiameter */
      maskDiameter: number;
      /** Boxsize */
      boxSize: number;
      /** Downsampleboxsize */
      downsampleBoxSize: number;
      /**
       * Performcalculation
       * @default true
       */
      performCalculation?: boolean;
      /**
       * Usefsccriterion
       * @default false
       */
      useFscCriterion?: boolean;
      /**
       * Perform2Dsecondpass
       * @default true
       */
      perform2DSecondPass?: boolean;
      /**
       * Perform3Dsecondpass
       * @default false
       */
      perform3DSecondPass?: boolean;
      /** Minimumdiameter */
      minimumDiameter?: number;
      /** Maximumdiameter */
      maximumDiameter?: number;
      /**
       * Gainreferencefile
       * @default gain.mrc
       */
      gainReferenceFile?: string;
      /**
       * Extractdownscale
       * @default false
       */
      extractDownscale?: boolean;
    };
    /** SessionResponse */
    SessionResponse: {
      /**
       * Sessionid
       * @description Session ID
       */
      sessionId: number;
      /** Beamlinesetupid */
      beamLineSetupId?: number;
      /**
       * Proposalid
       * @description Proposal ID
       */
      proposalId: number;
      /** Beamcalendarid */
      beamCalendarId?: number;
      /** Projectcode */
      projectCode: string;
      /**
       * Startdate
       * Format: date-time
       */
      startDate?: string;
      /**
       * Enddate
       * Format: date-time
       */
      endDate?: string;
      /** Beamlinename */
      beamLineName: string;
      /** Scheduled */
      scheduled: number;
      /** Nbshifts */
      nbShifts: number;
      /** Comments */
      comments: string;
      /** Beamlineoperator */
      beamLineOperator?: string;
      /**
       * Bltimestamp
       * Format: date-time
       */
      bltimeStamp: string;
      /** Parentproposal */
      parentProposal: string;
      /** Visit Number */
      visit_number: number;
      /**
       * Usedflag
       * @description Indicates if session has Datacollections or XFE or EnergyScans attached
       */
      usedFlag: number;
      /** Sessiontitle */
      sessionTitle: string;
      /** Structuredeterminations */
      structureDeterminations?: number;
      /** Dewartransport */
      dewarTransport?: number;
      /**
       * Databackupfrance
       * @description Data backup and express delivery France
       */
      databackupFrance: number;
      /**
       * Databackupeurope
       * @description Data backup and express delivery Europe
       */
      databackupEurope: number;
      /** Expsessionpk */
      expSessionPk: number;
      /**
       * Operatorsitenumber
       * @description Matricule site
       */
      operatorSiteNumber: string;
      /**
       * Lastupdate
       * Format: date-time
       * @description Last update timestamp: by default the end of the session, the last collect
       */
      lastUpdate: string;
      /**
       * Protecteddata
       * @description Indicates if the data is protected or not
       */
      protectedData: string;
      /**
       * Archived
       * @description The data for the session is archived and no longer available on disk
       */
      archived: number;
      /** Collectiongroups */
      collectionGroups?: number;
      /** Datacollectiongroupid */
      dataCollectionGroupId?: number;
    };
    /**
     * StateEnum
     * @description An enumeration.
     * @enum {string}
     */
    StateEnum: "Open" | "Closed" | "Cancelled";
    /** TiltImageAlignment */
    TiltImageAlignment: {
      /** Movieid */
      movieId: number;
      /** Defocusu */
      defocusU?: number;
      /** Defocusv */
      defocusV?: number;
      /** Psdfile */
      psdFile: string;
      /** Resolution */
      resolution?: number;
      /** Fitquality */
      fitQuality?: number;
      /** Refinedmagnification */
      refinedMagnification?: number;
      /** Refinedtiltangle */
      refinedTiltAngle?: number;
      /** Refinedtiltaxis */
      refinedTiltAxis?: number;
      /** Residualerror */
      residualError?: number;
    };
    /** TomogramFullResponse */
    TomogramFullResponse: {
      /** AutoProcProgram */
      AutoProcProgram: {
        /** Autoprocprogramid */
        autoProcProgramId: number;
        /** Processingcommandline */
        processingCommandLine?: string;
        /** Processingprograms */
        processingPrograms?: string;
        /** Processingstatus */
        processingStatus?: number;
        /** Processingmessage */
        processingMessage?: string;
        /**
         * Processingstarttime
         * Format: date-time
         */
        processingStartTime?: string;
        /**
         * Processingendtime
         * Format: date-time
         */
        processingEndTime?: string;
        /** Processingenvironment */
        processingEnvironment?: string;
        /**
         * Recordtimestamp
         * Format: date-time
         */
        recordTimeStamp?: string;
      };
      /** ProcessingJob */
      ProcessingJob: {
        /** Processingjobid */
        processingJobId: number;
        /** Datacollectionid */
        dataCollectionId: number;
        /** Displayname */
        displayName: string;
        /** Comments */
        comments: string;
        /**
         * Recordtimestamp
         * Format: date-time
         */
        recordTimestamp?: string;
        /** Recipe */
        recipe: string;
        /** Automatic */
        automatic?: number;
      };
      /** Status */
      status: string;
      /** TomogramResponse */
      Tomogram?: {
        /** Tomogramid */
        tomogramId: number;
        /** Volumefile */
        volumeFile: string;
        /** Stackfile */
        stackFile: string;
        /** Sizex */
        sizeX?: number;
        /** Sizey */
        sizeY?: number;
        /** Sizez */
        sizeZ?: number;
        /** Pixelspacing */
        pixelSpacing?: number;
        /** Residualerrormean */
        residualErrorMean?: number;
        /** Residualerrorsd */
        residualErrorSD?: number;
        /** Xaxiscorrection */
        xAxisCorrection?: number;
        /** Tiltangleoffset */
        tiltAngleOffset?: number;
        /** Zshift */
        zShift?: number;
        /** Refinedtiltaxis */
        refinedTiltAxis?: number;
      };
    };
    /** TomogramReprocessingParameters */
    TomogramReprocessingParameters: {
      /** Pixelsize */
      pixelSize: number;
      /** Tiltoffset */
      tiltOffset: number;
    };
    /** TomogramResponse */
    TomogramResponse: {
      /** Tomogramid */
      tomogramId: number;
      /** Volumefile */
      volumeFile: string;
      /** Stackfile */
      stackFile: string;
      /** Sizex */
      sizeX?: number;
      /** Sizey */
      sizeY?: number;
      /** Sizez */
      sizeZ?: number;
      /** Pixelspacing */
      pixelSpacing?: number;
      /** Residualerrormean */
      residualErrorMean?: number;
      /** Residualerrorsd */
      residualErrorSD?: number;
      /** Xaxiscorrection */
      xAxisCorrection?: number;
      /** Tiltangleoffset */
      tiltAngleOffset?: number;
      /** Zshift */
      zShift?: number;
      /** Refinedtiltaxis */
      refinedTiltAxis?: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  get_sessions_sessions_get: {
    /**
     * Get Sessions
     * @description List visits belonging to a proposal
     */
    parameters?: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        proposal?: string;
        search?: string;
        minEndDate?: string;
        maxEndDate?: string;
        minStartDate?: string;
        maxStartDate?: string;
        countCollections?: boolean;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /**
               * Sessionid
               * @description Session ID
               */
              sessionId: number;
              /** Beamlinesetupid */
              beamLineSetupId?: number;
              /**
               * Proposalid
               * @description Proposal ID
               */
              proposalId: number;
              /** Beamcalendarid */
              beamCalendarId?: number;
              /** Projectcode */
              projectCode: string;
              /**
               * Startdate
               * Format: date-time
               */
              startDate?: string;
              /**
               * Enddate
               * Format: date-time
               */
              endDate?: string;
              /** Beamlinename */
              beamLineName: string;
              /** Scheduled */
              scheduled: number;
              /** Nbshifts */
              nbShifts: number;
              /** Comments */
              comments: string;
              /** Beamlineoperator */
              beamLineOperator?: string;
              /**
               * Bltimestamp
               * Format: date-time
               */
              bltimeStamp: string;
              /** Parentproposal */
              parentProposal: string;
              /** Visit Number */
              visit_number: number;
              /**
               * Usedflag
               * @description Indicates if session has Datacollections or XFE or EnergyScans attached
               */
              usedFlag: number;
              /** Sessiontitle */
              sessionTitle: string;
              /** Structuredeterminations */
              structureDeterminations?: number;
              /** Dewartransport */
              dewarTransport?: number;
              /**
               * Databackupfrance
               * @description Data backup and express delivery France
               */
              databackupFrance: number;
              /**
               * Databackupeurope
               * @description Data backup and express delivery Europe
               */
              databackupEurope: number;
              /** Expsessionpk */
              expSessionPk: number;
              /**
               * Operatorsitenumber
               * @description Matricule site
               */
              operatorSiteNumber: string;
              /**
               * Lastupdate
               * Format: date-time
               * @description Last update timestamp: by default the end of the session, the last collect
               */
              lastUpdate: string;
              /**
               * Protecteddata
               * @description Indicates if the data is protected or not
               */
              protectedData: string;
              /**
               * Archived
               * @description The data for the session is archived and no longer available on disk
               */
              archived: number;
              /** Collectiongroups */
              collectionGroups?: number;
              /** Datacollectiongroupid */
              dataCollectionGroupId?: number;
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_shift_plot_tomograms__tomogramId__shiftPlot_get: {
    /**
     * Get Shift Plot
     * @description Get X-Y shift plot data
     */
    parameters: {
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** X */
              x: number | string;
              /** Y */
              y: number;
            }[];
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_motion_correction_tomograms__tomogramId__motion_get: {
    /**
     * Get Motion Correction
     * @description Get motion correction data for the given tomogram
     */
    parameters: {
      /** @description Get index closest to the middle. Limit is set to 1, page is ignored */
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        getMiddle?: Record<string, never>;
        page?: number;
        limit?: number;
      };
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** CTF */
              CTF: {
                /** Ctfid */
                ctfId: number;
                /** Box size in x */
                boxSizeX: number;
                /** Box size in y */
                boxSizeY: number;
                /** Minimum resolution for CTF */
                minResolution: number;
                /** Maxresolution */
                maxResolution: number;
                /** Mindefocus */
                minDefocus: number;
                /** Maxdefocus */
                maxDefocus: number;
                /** Defocusstepsize */
                defocusStepSize: number;
                /** Astigmatism */
                astigmatism: number;
                /** Astigmatismangle */
                astigmatismAngle: number;
                /** Estimatedresolution */
                estimatedResolution: number;
                /** Estimateddefocus */
                estimatedDefocus: number;
                /** Amplitudecontrast */
                amplitudeContrast: number;
                /** Correlation value */
                ccValue: number;
                /** Full path to the jpg image of the simulated FFT */
                fftTheoreticalFullPath: string;
                /** Comments */
                comments: string;
              };
              /** Movie */
              Movie: {
                /** Movieid */
                movieId: number;
                /** Movienumber */
                movieNumber?: number;
                /** Moviefullpath */
                movieFullPath: string;
                /**
                 * Createdtimestamp
                 * Format: date-time
                 */
                createdTimeStamp: string;
                /** Positionx */
                positionX?: number;
                /** Positiony */
                positionY?: number;
                /** Nominal defocus */
                nominalDefocus: number;
                /** Angle */
                angle: number;
                /** accumulated electron fluence from start to end of acquisition of movie */
                fluence: number;
                /** number of frames per movie */
                numberOfFrames: number;
              };
              /** MotionCorrection */
              MotionCorrection: {
                /** Motioncorrectionid */
                motionCorrectionId: number;
                /** Datacollectionid */
                dataCollectionId?: number;
                /** Autoprocprogramid */
                autoProcProgramId?: number;
                /** Movie number, sequential in time 1-n */
                imageNumber: number;
                /** First frame of movie used */
                firstFrame: number;
                /** Last frame of movie used */
                lastFrame: number;
                /** Dose per frame */
                dosePerFrame: number;
                /** Dose weight */
                doseWeight: number;
                /** Total motion */
                totalMotion: number;
                /** Average motion per frame */
                averageMotionPerFrame: number;
                /** Path to drift plot */
                driftPlotFullPath: string;
                /** Path to micrograph */
                micrographFullPath: string;
                /** Path to micrograph */
                micrographSnapshotFullPath: string;
                /** Patches used in x */
                patchesUsedX: number;
                /** Patches used in y */
                patchesUsedY: number;
                /** Path to raw micrograph FFT */
                fftFullPath: string;
                /** Path to drift corrected micrograph FFT */
                fftCorrectedFullPath: string;
                /** Comments */
                comments: string;
              };
              /** TiltImageAlignment */
              TiltImageAlignment?: {
                /** Movieid */
                movieId: number;
                /** Defocusu */
                defocusU?: number;
                /** Defocusv */
                defocusV?: number;
                /** Psdfile */
                psdFile: string;
                /** Resolution */
                resolution?: number;
                /** Fitquality */
                fitQuality?: number;
                /** Refinedmagnification */
                refinedMagnification?: number;
                /** Refinedtiltangle */
                refinedTiltAngle?: number;
                /** Refinedtiltaxis */
                refinedTiltAxis?: number;
                /** Residualerror */
                residualError?: number;
              };
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
            /** Rawtotal */
            rawTotal: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_slice_tomograms__tomogramId__centralSlice_get: {
    /**
     * Get Slice
     * @description Get tomogram central slice image
     */
    parameters: {
      query?: {
        denoised?: Record<string, never>;
      };
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_movie_tomograms__tomogramId__movie_get: {
    /**
     * Get Movie
     * @description Get tomogram movie image
     */
    parameters: {
      query?: {
        denoised?: Record<string, never>;
      };
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_projection_tomograms__tomogramId__projection_get: {
    /**
     * Get Projection
     * @description Get tomogram projection image
     */
    parameters: {
      query: {
        axis: "xy" | "xz";
      };
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_ctf_tomograms__tomogramId__ctf_get: {
    /**
     * Get Ctf
     * @description Get astigmatism, resolution and defocus as a function of tilt image
     * alignment refined tilt angles
     */
    parameters: {
      path: {
        tomogramId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** Estimatedresolution */
              estimatedResolution?: number;
              /** Estimateddefocus */
              estimatedDefocus?: number;
              /** Astigmatism */
              astigmatism?: number;
              /** Refinedtiltangle */
              refinedTiltAngle?: number;
            }[];
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_micrograph_movies__movieId__micrograph_get: {
    /**
     * Get Micrograph
     * @description Get micrograph snapshot
     */
    parameters: {
      path: {
        movieId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_fft_movies__movieId__fft_get: {
    /**
     * Get Fft
     * @description Get FFT theoretical image
     */
    parameters: {
      path: {
        movieId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_drift_movies__movieId__drift_get: {
    /**
     * Get Drift
     * @description Get drift from a JSON file or from the drift table
     */
    parameters: {
      path: {
        movieId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** X */
              x: number | string;
              /** Y */
              y: number;
            }[];
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_relative_ice_thickness_movies__movieId__iceThickness_get: {
    /**
     * Get Relative Ice Thickness
     * @description Get values for relative ice thickness for a given movie
     */
    parameters: {
      query?: {
        getAverages?: boolean;
      };
      path: {
        movieId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Current */
            current: {
              /** Minimum */
              minimum: number;
              /** Q1 */
              q1: number;
              /** Median */
              median: number;
              /** Q3 */
              q3: number;
              /** Maximum */
              maximum: number;
            };
            /** Avg */
            avg: {
              /** Minimum */
              minimum: number;
              /** Q1 */
              q1: number;
              /** Median */
              median: number;
              /** Q3 */
              q3: number;
              /** Maximum */
              maximum: number;
            };
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_tomograms_dataCollections__collectionId__tomograms_get: {
    /**
     * Get Tomograms
     * @description Get tomogram that belongs to the collection
     */
    parameters: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        page?: number;
        limit?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** AutoProcProgram */
              AutoProcProgram: {
                /** Autoprocprogramid */
                autoProcProgramId: number;
                /** Processingcommandline */
                processingCommandLine?: string;
                /** Processingprograms */
                processingPrograms?: string;
                /** Processingstatus */
                processingStatus?: number;
                /** Processingmessage */
                processingMessage?: string;
                /**
                 * Processingstarttime
                 * Format: date-time
                 */
                processingStartTime?: string;
                /**
                 * Processingendtime
                 * Format: date-time
                 */
                processingEndTime?: string;
                /** Processingenvironment */
                processingEnvironment?: string;
                /**
                 * Recordtimestamp
                 * Format: date-time
                 */
                recordTimeStamp?: string;
              };
              /** ProcessingJob */
              ProcessingJob: {
                /** Processingjobid */
                processingJobId: number;
                /** Datacollectionid */
                dataCollectionId: number;
                /** Displayname */
                displayName: string;
                /** Comments */
                comments: string;
                /**
                 * Recordtimestamp
                 * Format: date-time
                 */
                recordTimestamp?: string;
                /** Recipe */
                recipe: string;
                /** Automatic */
                automatic?: number;
              };
              /** Status */
              status: string;
              /** TomogramResponse */
              Tomogram?: {
                /** Tomogramid */
                tomogramId: number;
                /** Volumefile */
                volumeFile: string;
                /** Stackfile */
                stackFile: string;
                /** Sizex */
                sizeX?: number;
                /** Sizey */
                sizeY?: number;
                /** Sizez */
                sizeZ?: number;
                /** Pixelspacing */
                pixelSpacing?: number;
                /** Residualerrormean */
                residualErrorMean?: number;
                /** Residualerrorsd */
                residualErrorSD?: number;
                /** Xaxiscorrection */
                xAxisCorrection?: number;
                /** Tiltangleoffset */
                tiltAngleOffset?: number;
                /** Zshift */
                zShift?: number;
                /** Refinedtiltaxis */
                refinedTiltAxis?: number;
              };
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  initiate_tomogram_reprocessing_dataCollections__collectionId__reprocessing_tomograms_post: {
    /**
     * Initiate Tomogram Reprocessing
     * @description Initiate data reprocessing
     */
    parameters: {
      path: {
        collectionId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Pixelsize */
          pixelSize: number;
          /** Tiltoffset */
          tiltOffset: number;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": {
            /** Processingjobid */
            processingJobId: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  initiate_spa_reprocessing_dataCollections__collectionId__reprocessing_spa_post: {
    /**
     * Initiate Spa Reprocessing
     * @description Initiate data reprocessing
     */
    parameters: {
      path: {
        collectionId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Voltage
           * @default 300
           * @enum {integer}
           */
          voltage?: 200 | 300;
          /**
           * Sphericalaberration
           * @default 2.7
           */
          sphericalAberration?: number;
          /**
           * Phaseplateused
           * @default false
           */
          phasePlateUsed?: boolean;
          /** Pixelsize */
          pixelSize: number;
          /**
           * Motioncorrectionbinning
           * @default 1
           * @enum {integer}
           */
          motionCorrectionBinning?: 1 | 2;
          /** Doseperframe */
          dosePerFrame: number;
          /**
           * Stopafterctfestimation
           * @default false
           */
          stopAfterCtfEstimation?: boolean;
          /**
           * Usecryolo
           * @description Use crYOLO with autopick. Academic users only.
           * @default false
           */
          useCryolo?: boolean;
          /**
           * Doclass3D
           * @default true
           */
          doClass3D?: boolean;
          /**
           * Doclass2D
           * @default true
           */
          doClass2D?: boolean;
          /** Maskdiameter */
          maskDiameter: number;
          /** Boxsize */
          boxSize: number;
          /** Downsampleboxsize */
          downsampleBoxSize: number;
          /**
           * Performcalculation
           * @default true
           */
          performCalculation?: boolean;
          /**
           * Usefsccriterion
           * @default false
           */
          useFscCriterion?: boolean;
          /**
           * Perform2Dsecondpass
           * @default true
           */
          perform2DSecondPass?: boolean;
          /**
           * Perform3Dsecondpass
           * @default false
           */
          perform3DSecondPass?: boolean;
          /** Minimumdiameter */
          minimumDiameter?: number;
          /** Maximumdiameter */
          maximumDiameter?: number;
          /**
           * Gainreferencefile
           * @default gain.mrc
           */
          gainReferenceFile?: string;
          /**
           * Extractdownscale
           * @default false
           */
          extractDownscale?: boolean;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": {
            /** Processingjobid */
            processingJobId: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_processing_jobs_dataCollections__collectionId__processingJobs_get: {
    /**
     * Get Processing Jobs
     * @description Get processing jobs that belong to the collection
     */
    parameters: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        search?: string;
        page?: number;
        limit?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** AutoProcProgram */
              AutoProcProgram: {
                /** Autoprocprogramid */
                autoProcProgramId: number;
                /** Processingcommandline */
                processingCommandLine?: string;
                /** Processingprograms */
                processingPrograms?: string;
                /** Processingstatus */
                processingStatus?: number;
                /** Processingmessage */
                processingMessage?: string;
                /**
                 * Processingstarttime
                 * Format: date-time
                 */
                processingStartTime?: string;
                /**
                 * Processingendtime
                 * Format: date-time
                 */
                processingEndTime?: string;
                /** Processingenvironment */
                processingEnvironment?: string;
                /**
                 * Recordtimestamp
                 * Format: date-time
                 */
                recordTimeStamp?: string;
              };
              /** ProcessingJob */
              ProcessingJob: {
                /** Processingjobid */
                processingJobId: number;
                /** Datacollectionid */
                dataCollectionId: number;
                /** Displayname */
                displayName: string;
                /** Comments */
                comments: string;
                /**
                 * Recordtimestamp
                 * Format: date-time
                 */
                recordTimestamp?: string;
                /** Recipe */
                recipe: string;
                /** Automatic */
                automatic?: number;
              };
              /** Status */
              status: string;
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_motion_correction_dataCollections__collectionId__motion_get: {
    /**
     * Get Motion Correction
     * @description Get motion correction and tilt alignment data
     */
    parameters: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        page?: number;
        limit?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** CTF */
              CTF: {
                /** Ctfid */
                ctfId: number;
                /** Box size in x */
                boxSizeX: number;
                /** Box size in y */
                boxSizeY: number;
                /** Minimum resolution for CTF */
                minResolution: number;
                /** Maxresolution */
                maxResolution: number;
                /** Mindefocus */
                minDefocus: number;
                /** Maxdefocus */
                maxDefocus: number;
                /** Defocusstepsize */
                defocusStepSize: number;
                /** Astigmatism */
                astigmatism: number;
                /** Astigmatismangle */
                astigmatismAngle: number;
                /** Estimatedresolution */
                estimatedResolution: number;
                /** Estimateddefocus */
                estimatedDefocus: number;
                /** Amplitudecontrast */
                amplitudeContrast: number;
                /** Correlation value */
                ccValue: number;
                /** Full path to the jpg image of the simulated FFT */
                fftTheoreticalFullPath: string;
                /** Comments */
                comments: string;
              };
              /** Movie */
              Movie: {
                /** Movieid */
                movieId: number;
                /** Movienumber */
                movieNumber?: number;
                /** Moviefullpath */
                movieFullPath: string;
                /**
                 * Createdtimestamp
                 * Format: date-time
                 */
                createdTimeStamp: string;
                /** Positionx */
                positionX?: number;
                /** Positiony */
                positionY?: number;
                /** Nominal defocus */
                nominalDefocus: number;
                /** Angle */
                angle: number;
                /** accumulated electron fluence from start to end of acquisition of movie */
                fluence: number;
                /** number of frames per movie */
                numberOfFrames: number;
              };
              /** MotionCorrection */
              MotionCorrection: {
                /** Motioncorrectionid */
                motionCorrectionId: number;
                /** Datacollectionid */
                dataCollectionId?: number;
                /** Autoprocprogramid */
                autoProcProgramId?: number;
                /** Movie number, sequential in time 1-n */
                imageNumber: number;
                /** First frame of movie used */
                firstFrame: number;
                /** Last frame of movie used */
                lastFrame: number;
                /** Dose per frame */
                dosePerFrame: number;
                /** Dose weight */
                doseWeight: number;
                /** Total motion */
                totalMotion: number;
                /** Average motion per frame */
                averageMotionPerFrame: number;
                /** Path to drift plot */
                driftPlotFullPath: string;
                /** Path to micrograph */
                micrographFullPath: string;
                /** Path to micrograph */
                micrographSnapshotFullPath: string;
                /** Patches used in x */
                patchesUsedX: number;
                /** Patches used in y */
                patchesUsedY: number;
                /** Path to raw micrograph FFT */
                fftFullPath: string;
                /** Path to drift corrected micrograph FFT */
                fftCorrectedFullPath: string;
                /** Comments */
                comments: string;
              };
              /** TiltImageAlignment */
              TiltImageAlignment?: {
                /** Movieid */
                movieId: number;
                /** Defocusu */
                defocusU?: number;
                /** Defocusv */
                defocusV?: number;
                /** Psdfile */
                psdFile: string;
                /** Resolution */
                resolution?: number;
                /** Fitquality */
                fitQuality?: number;
                /** Refinedmagnification */
                refinedMagnification?: number;
                /** Refinedtiltangle */
                refinedTiltAngle?: number;
                /** Refinedtiltaxis */
                refinedTiltAxis?: number;
                /** Residualerror */
                residualError?: number;
              };
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_ice_histogram_dataCollections__collectionId__iceThickness_get: {
    /**
     * Get Ice Histogram
     * @description Get relative ice thickness histogram
     */
    parameters: {
      query?: {
        dataBin?: number;
        minimum?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_motion_histogram_dataCollections__collectionId__totalMotion_get: {
    /**
     * Get Motion Histogram
     * @description Get total motion histogram
     */
    parameters: {
      query?: {
        dataBin?: number;
        minimum?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_resolution_dataCollections__collectionId__resolution_get: {
    /**
     * Get Resolution
     * @description Get estimated resolution histogram
     */
    parameters: {
      query?: {
        dataBin?: number;
        minimum?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_particle_count_dataCollections__collectionId__particles_get: {
    /**
     * Get Particle Count
     * @description Get particle count histogram
     */
    parameters: {
      query?: {
        dataBin?: number;
        minimum?: number;
      };
      path: {
        collectionId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_collection_groups_dataGroups_get: {
    /**
     * Get Collection Groups
     * @description List collection groups belonging to a session
     */
    parameters?: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        session?: number;
        proposal?: string;
        search?: string;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /**
               * Datacollectiongroupid
               * @description Data Collection Group ID
               */
              dataCollectionGroupId: number;
              /**
               * Sessionid
               * @description Session ID
               */
              sessionId: number;
              /** Experimenttype */
              experimentType?: string;
              /**
               * Experimenttypeid
               * @default 37
               */
              experimentTypeId?: number;
              /**
               * Experimenttypename
               * @default Single Particle
               */
              experimentTypeName?: string;
              /** Imagedirectory */
              imageDirectory?: string;
              /** Comments */
              comments?: string;
              /** Collections */
              collections: number;
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_collections_dataGroups__groupId__dataCollections_get: {
    /**
     * Get Collections
     * @description List collections belonging to a data collection group
     */
    parameters: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        search?: string;
        onlyTomograms?: boolean;
        page?: number;
        limit?: number;
      };
      path: {
        groupId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /**
               * Datacollectionid
               * @description Data Collection ID
               */
              dataCollectionId: number;
              /**
               * Sessionid
               * @description Session ID
               */
              SESSIONID: number;
              /** Comments */
              comments?: string;
              /**
               * Starttime
               * Format: date-time
               * @description Start time of the dataCollection
               */
              startTime: string;
              /** Pixelsizeonimage */
              pixelSizeOnImage: number;
              /** Voltage */
              voltage: number;
              /** Imagesizex */
              imageSizeX: number;
              /** Imagesizey */
              imageSizeY: number;
              /** Experimenttype */
              experimenttype: string;
              /** Index */
              index: number;
              /**
               * Endtime
               * Format: date-time
               * @description End time of the dataCollection
               */
              endTime: string;
              /** Runstatus */
              runStatus: string;
              /** Axisstart */
              axisStart?: number;
              /** Axisend */
              axisEnd?: number;
              /** Axisrange */
              axisRange?: number;
              /** Overlap */
              overlap?: number;
              /** Numberofimages */
              numberOfImages?: number;
              /** Startimagenumber */
              startImageNumber?: number;
              /** Numberofpasses */
              numberOfPasses?: number;
              /** Exposuretime */
              exposureTime?: number;
              /**
               * Imagedirectory
               * @description The directory where files reside - should end with a slash
               */
              imageDirectory: string;
              /** Imageprefix */
              imagePrefix: string;
              /** Imagesuffix */
              imageSuffix: string;
              /**
               * Imagecontainersubpath
               * @description Internal path of a HDF5 file pointing to the data
               *         for this data collection
               */
              imageContainerSubPath: string;
              /** Filetemplate */
              fileTemplate: string;
              /** Wavelength */
              wavelength?: number;
              /** Resolution */
              resolution?: number;
              /** Detectordistance */
              detectorDistance?: number;
              /** Xbeam */
              xBeam?: number;
              /** Ybeam */
              yBeam?: number;
              /** Printableforreport */
              printableForReport?: number;
              /** Crystalclass */
              CRYSTALCLASS: string;
              /** Slitgapvertical */
              slitGapVertical?: number;
              /** Slitgaphorizontal */
              slitGapHorizontal?: number;
              /** Transmission */
              transmission?: number;
              /** Synchrotronmode */
              synchrotronMode: string;
              /** Xtalsnapshotfullpath1 */
              xtalSnapshotFullPath1: string;
              /** Xtalsnapshotfullpath2 */
              xtalSnapshotFullPath2: string;
              /** Xtalsnapshotfullpath3 */
              xtalSnapshotFullPath3: string;
              /** Xtalsnapshotfullpath4 */
              xtalSnapshotFullPath4: string;
              /**
               * RotationAxisEnum
               * @description An enumeration.
               * @enum {string}
               */
              rotationAxis?: "Omega" | "Kappa" | "Phi";
              /** Phistart */
              phiStart?: number;
              /** Kappastart */
              kappaStart?: number;
              /** Omegastart */
              omegaStart?: number;
              /** Chistart */
              chiStart?: number;
              /** Resolutionatcorner */
              resolutionAtCorner?: number;
              /** Detector2Theta */
              detector2Theta?: number;
              /** Detectormode */
              DETECTORMODE: string;
              /** Undulatorgap1 */
              undulatorGap1?: number;
              /** Undulatorgap2 */
              undulatorGap2?: number;
              /** Undulatorgap3 */
              undulatorGap3?: number;
              /** Beamsizeatsamplex */
              beamSizeAtSampleX?: number;
              /** Beamsizeatsampley */
              beamSizeAtSampleY?: number;
              /** Centeringmethod */
              centeringMethod: string;
              /** Averagetemperature */
              averageTemperature?: number;
              /** Actualcenteringposition */
              actualCenteringPosition: string;
              /** Beamshape */
              beamShape: string;
              /** Datacollectiongroupid */
              dataCollectionGroupId: number;
              /** Positionid */
              POSITIONID?: number;
              /** Detectorid */
              detectorId?: number;
              /** Screeningorigid */
              screeningOrigId?: number;
              /** Startpositionid */
              startPositionId?: number;
              /** Endpositionid */
              endPositionId?: number;
              /** Flux */
              flux?: number;
              /** Strategysubwedgeorigid */
              strategySubWedgeOrigId?: number;
              /** Blsubsampleid */
              blSubSampleId?: number;
              /** Flux End */
              flux_end?: number;
              /** Bestwilsonplotpath */
              bestWilsonPlotPath: string;
              /** Processeddatafile */
              processedDataFile: string;
              /** Datfullpath */
              datFullPath: string;
              /** Magnification */
              magnification?: number;
              /** Totalabsorbeddose */
              totalAbsorbedDose?: number;
              /** Binning */
              binning?: number;
              /** Particlediameter */
              particleDiameter?: number;
              /** Boxsize Ctf */
              boxSize_CTF?: number;
              /** Minresolution */
              minResolution?: number;
              /** Mindefocus */
              minDefocus?: number;
              /** Maxdefocus */
              maxDefocus?: number;
              /** Defocusstepsize */
              defocusStepSize?: number;
              /** Amountastigmatism */
              amountAstigmatism?: number;
              /** Extractsize */
              extractSize?: number;
              /** Bgradius */
              bgRadius?: number;
              /** Objaperture */
              objAperture?: number;
              /** C1Aperture */
              c1aperture?: number;
              /** C2Aperture */
              c2aperture?: number;
              /** C3Aperture */
              c3aperture?: number;
              /** C1Lens */
              c1lens?: number;
              /** C2Lens */
              c2lens?: number;
              /** C3Lens */
              c3lens?: number;
              /** Totalexposeddose */
              totalExposedDose?: number;
              /** Nominalmagnification */
              nominalMagnification?: number;
              /** Nominaldefocus */
              nominalDefocus?: number;
              /** Phaseplate */
              phasePlate?: string;
              /** Datacollectionplanid */
              dataCollectionPlanId?: number;
              /** Tomograms */
              tomograms: number;
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_proposals_proposals_get: {
    /**
     * Get Proposals
     * @description List proposals
     */
    parameters?: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        search?: string;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /**
               * Proposalid
               * @description Proposal ID
               */
              proposalId: number;
              /** Personid */
              personId: number;
              /** Title */
              title: string;
              /** Proposalcode */
              proposalCode: string;
              /** Proposalnumber */
              proposalNumber: string;
              /**
               * Bltimestamp
               * Format: date-time
               */
              bltimeStamp: string;
              /** Proposaltype */
              proposalType: string;
              /**
               * StateEnum
               * @description An enumeration.
               * @enum {string}
               */
              state: "Open" | "Closed" | "Cancelled";
              /** Sessions */
              sessions: number;
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_session_proposals__proposalReference__sessions__visitNumber__get: {
    /**
     * Get Session
     * @description List proposals
     */
    parameters: {
      path: {
        visitNumber: Record<string, never>;
        proposalReference: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * Sessionid
             * @description Session ID
             */
            sessionId: number;
            /** Beamlinesetupid */
            beamLineSetupId?: number;
            /**
             * Proposalid
             * @description Proposal ID
             */
            proposalId: number;
            /** Beamcalendarid */
            beamCalendarId?: number;
            /** Projectcode */
            projectCode: string;
            /**
             * Startdate
             * Format: date-time
             */
            startDate?: string;
            /**
             * Enddate
             * Format: date-time
             */
            endDate?: string;
            /** Beamlinename */
            beamLineName: string;
            /** Scheduled */
            scheduled: number;
            /** Nbshifts */
            nbShifts: number;
            /** Comments */
            comments: string;
            /** Beamlineoperator */
            beamLineOperator?: string;
            /**
             * Bltimestamp
             * Format: date-time
             */
            bltimeStamp: string;
            /** Parentproposal */
            parentProposal: string;
            /** Visit Number */
            visit_number: number;
            /**
             * Usedflag
             * @description Indicates if session has Datacollections or XFE or EnergyScans attached
             */
            usedFlag: number;
            /** Sessiontitle */
            sessionTitle: string;
            /** Structuredeterminations */
            structureDeterminations?: number;
            /** Dewartransport */
            dewarTransport?: number;
            /**
             * Databackupfrance
             * @description Data backup and express delivery France
             */
            databackupFrance: number;
            /**
             * Databackupeurope
             * @description Data backup and express delivery Europe
             */
            databackupEurope: number;
            /** Expsessionpk */
            expSessionPk: number;
            /**
             * Operatorsitenumber
             * @description Matricule site
             */
            operatorSiteNumber: string;
            /**
             * Lastupdate
             * Format: date-time
             * @description Last update timestamp: by default the end of the session, the last collect
             */
            lastUpdate: string;
            /**
             * Protecteddata
             * @description Indicates if the data is protected or not
             */
            protectedData: string;
            /**
             * Archived
             * @description The data for the session is archived and no longer available on disk
             */
            archived: number;
            /** Collectiongroups */
            collectionGroups?: number;
            /** Datacollectiongroupid */
            dataCollectionGroupId?: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_tomogram_autoProc__autoProcId__tomogram_get: {
    /**
     * Get Tomogram
     * @description Get tomogram
     */
    parameters: {
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Tomogramid */
            tomogramId: number;
            /** Volumefile */
            volumeFile: string;
            /** Stackfile */
            stackFile: string;
            /** Sizex */
            sizeX?: number;
            /** Sizey */
            sizeY?: number;
            /** Sizez */
            sizeZ?: number;
            /** Pixelspacing */
            pixelSpacing?: number;
            /** Residualerrormean */
            residualErrorMean?: number;
            /** Residualerrorsd */
            residualErrorSD?: number;
            /** Xaxiscorrection */
            xAxisCorrection?: number;
            /** Tiltangleoffset */
            tiltAngleOffset?: number;
            /** Zshift */
            zShift?: number;
            /** Refinedtiltaxis */
            refinedTiltAxis?: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_motion_correction_autoProc__autoProcId__motion_get: {
    /**
     * Get Motion Correction
     * @description Get motion correction and tilt alignment data (including drift plot)
     */
    parameters: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        page?: number;
        limit?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** CTF */
              CTF: {
                /** Ctfid */
                ctfId: number;
                /** Box size in x */
                boxSizeX: number;
                /** Box size in y */
                boxSizeY: number;
                /** Minimum resolution for CTF */
                minResolution: number;
                /** Maxresolution */
                maxResolution: number;
                /** Mindefocus */
                minDefocus: number;
                /** Maxdefocus */
                maxDefocus: number;
                /** Defocusstepsize */
                defocusStepSize: number;
                /** Astigmatism */
                astigmatism: number;
                /** Astigmatismangle */
                astigmatismAngle: number;
                /** Estimatedresolution */
                estimatedResolution: number;
                /** Estimateddefocus */
                estimatedDefocus: number;
                /** Amplitudecontrast */
                amplitudeContrast: number;
                /** Correlation value */
                ccValue: number;
                /** Full path to the jpg image of the simulated FFT */
                fftTheoreticalFullPath: string;
                /** Comments */
                comments: string;
              };
              /** Movie */
              Movie: {
                /** Movieid */
                movieId: number;
                /** Movienumber */
                movieNumber?: number;
                /** Moviefullpath */
                movieFullPath: string;
                /**
                 * Createdtimestamp
                 * Format: date-time
                 */
                createdTimeStamp: string;
                /** Positionx */
                positionX?: number;
                /** Positiony */
                positionY?: number;
                /** Nominal defocus */
                nominalDefocus: number;
                /** Angle */
                angle: number;
                /** accumulated electron fluence from start to end of acquisition of movie */
                fluence: number;
                /** number of frames per movie */
                numberOfFrames: number;
              };
              /** MotionCorrection */
              MotionCorrection: {
                /** Motioncorrectionid */
                motionCorrectionId: number;
                /** Datacollectionid */
                dataCollectionId?: number;
                /** Autoprocprogramid */
                autoProcProgramId?: number;
                /** Movie number, sequential in time 1-n */
                imageNumber: number;
                /** First frame of movie used */
                firstFrame: number;
                /** Last frame of movie used */
                lastFrame: number;
                /** Dose per frame */
                dosePerFrame: number;
                /** Dose weight */
                doseWeight: number;
                /** Total motion */
                totalMotion: number;
                /** Average motion per frame */
                averageMotionPerFrame: number;
                /** Path to drift plot */
                driftPlotFullPath: string;
                /** Path to micrograph */
                micrographFullPath: string;
                /** Path to micrograph */
                micrographSnapshotFullPath: string;
                /** Patches used in x */
                patchesUsedX: number;
                /** Patches used in y */
                patchesUsedY: number;
                /** Path to raw micrograph FFT */
                fftFullPath: string;
                /** Path to drift corrected micrograph FFT */
                fftCorrectedFullPath: string;
                /** Comments */
                comments: string;
              };
              /** TiltImageAlignment */
              TiltImageAlignment?: {
                /** Movieid */
                movieId: number;
                /** Defocusu */
                defocusU?: number;
                /** Defocusv */
                defocusV?: number;
                /** Psdfile */
                psdFile: string;
                /** Resolution */
                resolution?: number;
                /** Fitquality */
                fitQuality?: number;
                /** Refinedmagnification */
                refinedMagnification?: number;
                /** Refinedtiltangle */
                refinedTiltAngle?: number;
                /** Refinedtiltaxis */
                refinedTiltAxis?: number;
                /** Residualerror */
                residualError?: number;
              };
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_ctf_autoProc__autoProcId__ctf_get: {
    /**
     * Get Ctf
     * @description Get astigmatism, resolution and defocus as a function of motion correction
     * image numbers
     */
    parameters: {
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** Estimatedresolution */
              estimatedResolution?: number;
              /** Estimateddefocus */
              estimatedDefocus?: number;
              /** Astigmatism */
              astigmatism?: number;
              /** Imagenumber */
              imageNumber: number;
            }[];
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_particle_picker_autoProc__autoProcId__particlePicker_get: {
    /**
     * Get Particle Picker
     * @description Get particle picking data
     */
    parameters: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        filterNull?: boolean;
        page?: number;
        limit?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** Particlediameter */
              particleDiameter?: number;
              /** Numberofparticles */
              numberOfParticles?: number;
              /** Particlepickerid */
              particlePickerId?: number;
              /** Summaryfullimagepath */
              summaryFullImagePath?: string;
              /** Imagenumber */
              imageNumber: number;
              /** Movieid */
              movieId: number;
              /**
               * Createdtimestamp
               * Format: date-time
               */
              createdTimeStamp?: string;
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_classification_autoProc__autoProcId__classification_get: {
    /**
     * Get Classification
     * @description Get classification data
     */
    parameters: {
      /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
      /** @description Number of results to show */
      query?: {
        sortBy?: "class" | "particles" | "resolution";
        classType?: "2d" | "3d";
        excludeUnselected?: boolean;
        page?: number;
        limit?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              /** Particleclassificationgroupid */
              particleClassificationGroupId: number;
              /** Particlepickerid */
              particlePickerId: number;
              /** Programid */
              programId: number;
              /** Type */
              type: string;
              /** Batchnumber */
              batchNumber: number;
              /** Numberofparticlesperbatch */
              numberOfParticlesPerBatch: number;
              /** Numberofclassesperbatch */
              numberOfClassesPerBatch: number;
              /** Symmetry */
              symmetry: string;
              /** Particleclassificationid */
              particleClassificationId: number;
              /** Classnumber */
              classNumber: number;
              /** Classimagefullpath */
              classImageFullPath?: string;
              /** Particlesperclass */
              particlesPerClass?: number;
              /** Rotationaccuracy */
              rotationAccuracy: number;
              /** Translationaccuracy */
              translationAccuracy: number;
              /** Estimatedresolution */
              estimatedResolution: number;
              /** Overallfouriercompleteness */
              overallFourierCompleteness: number;
              /** Classdistribution */
              classDistribution?: number;
              /** Selected */
              selected?: boolean;
            }[];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_classification_image_autoProc__autoProcId__classification__classificationId__image_get: {
    /**
     * Get Classification Image
     * @description Get class' image representation or MRC file
     */
    parameters: {
      path: {
        classificationId: number;
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_particle_picker_image_autoProc__autoProcId__particlePicker__particlePickerId__image_get: {
    /**
     * Get Particle Picker Image
     * @description Get class image
     */
    parameters: {
      path: {
        particlePickerId: number;
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_ice_histogram_autoProc__autoProcId__iceThickness_get: {
    /**
     * Get Ice Histogram
     * @description Get relative ice thickness histogram
     */
    parameters: {
      query?: {
        dataBin?: number;
        minimum?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_motion_autoProc__autoProcId__totalMotion_get: {
    /**
     * Get Motion
     * @description Get total motion histogram
     */
    parameters: {
      query?: {
        dataBin?: number;
        minimum?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_resolution_autoProc__autoProcId__resolution_get: {
    /**
     * Get Resolution
     * @description Get estimated resolution histogram
     */
    parameters: {
      query?: {
        dataBin?: number;
        minimum?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  get_particle_count_autoProc__autoProcId__particles_get: {
    /**
     * Get Particle Count
     * @description Get particle count histogram
     */
    parameters: {
      query?: {
        dataBin?: number;
        minimum?: number;
      };
      path: {
        autoProcId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  post_feedback_feedback_post: {
    /**
     * Post Feedback
     * @description Post user feedback to configured email address
     */
    requestBody: {
      content: {
        "application/json": {
          /** Fullname */
          fullName: string;
          /** Email */
          email: string;
          /** Comments */
          comments: string;
          /** Useragent */
          userAgent: string;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
  initiate_tomogram_reprocessing_processingJob__processingJobId__parameters_get: {
    /**
     * Initiate Tomogram Reprocessing
     * @description Get processing job parameters
     */
    parameters: {
      path: {
        processingJobId: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            /** Items */
            items: {
              [key: string]: string | undefined;
            };
            /** Allowreprocessing */
            allowReprocessing: boolean;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": {
            /** Detail */
            detail?: {
              /** Location */
              loc: (string | number)[];
              /** Message */
              msg: string;
              /** Error Type */
              type: string;
            }[];
          };
        };
      };
    };
  };
}
